const expect = require('chai').expect
const Promise = require('../index.js')

describe('Promise.race', () => {
    it('正常情况', done => {
        const a = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('a')
                }, 100)
            })
        }
        const b = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('b')
                }, 200)
            })
        }
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('c')
                }, 300)
            })
        }
        Promise.race([a(), b(), c()])
                .then(data => {
                    expect(data).to.equal('a')
                    done()
                })
    })

    it('如果第一个完成的promise是resovle，则race进resolve，不管后面的是什么结果', done => {
        const a = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('a')
                }, 100)
            })
        }
        const b = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('b.reject')
                }, 200)
            })
        }
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('c')
                }, 300)
            })
        }
        Promise.race([a(), b(), c()])
                .then(data => {
                    expect(data).to.equal('a')
                    done()
                })
    })
    it('如果第一个完成的promise是reject，则race进reject，不管后面的是什么结果', done => {
        const a = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('a.reject')
                }, 100)
            })
        }
        const b = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('b.reject')
                }, 200)
            })
        }
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('c')
                }, 300)
            })
        }
        Promise.race([a(), b(), c()])
               
                .catch(err => {
                    expect(err).to.equal('a.reject')
                    done()
                })
    })
    it('全部promise报错，还是取第一个错误', done => {
        const a = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('a.reject')
                }, 100)
            })
        }
        const b = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('b.reject')
                }, 200)
            })
        }
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('c.reject')
                }, 300)
            })
        }
        Promise.race([a(), b(), c()])
                .then(data => {
					done()
				})
                .catch(err => {
                    expect(err).to.equal('a.reject')
                    done()
                })
    })
})