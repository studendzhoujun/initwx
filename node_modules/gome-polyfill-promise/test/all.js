const expect = require('chai').expect
const Promise = require('../index.js')

describe('Promise.all', () => {
    it('正常情况', done => {
        const a = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('a')
                }, 100)
            })
        }
        const b = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('b')
                }, 200)
            })
        }
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('c')
                }, 300)
            })
        }
        Promise.all([a(), b(), c()])
                .then(data => {
                    expect(data).to.a('array')
                    expect(data[0]).to.equal('a')
                    expect(data[1]).to.equal('b')
                    expect(data[2]).to.equal('c')
                    done()
                })
    })

    it('某一个promise报错，应该在catch中只捕获到那个错误', done => {
        const a = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('a')
                }, 100)
            })
        }
        const b = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('b.reject')
                }, 200)
            })
        }
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('c')
                }, 300)
            })
        }
        Promise.all([a(), b(), c()])
                .catch(err => {
                    expect(err).to.equal('b.reject')
                    done()
                })
    })
    it('多个而非全部promise报错，应该在catch中只捕获到第一个错误', done => {
        const a = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('a')
                }, 100)
            })
        }
        const b = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('b.reject')
                }, 200)
            })
        }
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('c.reject')
                }, 300)
            })
        }
        Promise.all([a(), b(), c()])
                .catch(err => {
                    console.log(err)
                    expect(err).to.equal('b.reject')
                    done()
                })
    })
    it('全部promise报错，应该在catch中只捕获到第一个错误', done => {
        const a = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('a.reject')
                }, 100)
            })
        }
        const b = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('b.reject')
                }, 200)
            })
        }
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject('c.reject')
                }, 300)
            })
        }
        Promise.all([a(), b(), c()])
                .catch(err => {
                    expect(err).to.equal('a.reject')
                    done()
                })
    })
	it('thenable、普通值、promies的组合', done => {
        const a = {
			then: (resolve) => {
				resolve('a')
			}
        }
        const b = 'b'
        const c = () => {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('c')
                }, 300)
            })
        }
        Promise.all([a, b, c()])
                .then(data => {
                    expect(data).to.a('array')
                    expect(data[0]).to.equal('a')
                    expect(data[1]).to.equal('b')
                    expect(data[2]).to.equal('c')
					done()
				})
    })
})