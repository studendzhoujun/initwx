const expect = require('chai').expect
const Promise = require('../index.js')

describe('Promise.resovle', () => {
    it('thenable正常', done => {
        const a = {
            then: (resolve) => {
				resolve('resolve')
            }
        }
		Promise.resolve(a).then(result => {
			expect(result).to.equal('resolve')
			done()
		})
    })
	it('thenable异常', done => {
        const a = {
            then: (resolve) => {
				throw new Error('reject')
				resolve('resolve')
            }
        }
		Promise.resolve(a).then(result => {
			expect(result).to.equal('resolve')
			done()
		}).catch(err => {
			expect(err.message).to.equal('reject')
			done()
		})
    })
    it('promise正常', done => {
		const pro = new Promise((resolve, reject) => {
			resolve('resolve')
		})
		Promise.resolve(pro).then(data => {
			expect(data).to.equal('resolve')
			done()
		})
    })
    it('promise异常', done => {
		const pro = new Promise((resolve, reject) => {
			reject('reject')
		})
		Promise.resolve(pro).then(data => {
			expect(data).to.equal('resolve')
			done()
		}).then(data => {
			expect(data).to.equal('resolve')
			done()
		}).then(data => {
			expect(data).to.equal('resolve')
			done()
		}).then(data => {
			expect(data).to.equal('resolve')
			done()
		}).then(data => {
			expect(data).to.equal('resolve')
			done()
		}).catch(err => {
			expect(err).to.equal('reject')
			done()
		})
    })
    it('各种直接值', done => {
		Promise.resolve(1).then(data => {
			expect(data).to.equal(1)
		})
		const arr = []
		Promise.resolve(arr).then(data => {
			expect(data).to.equal(arr)
		})
		Promise.resolve(true).then(data => {
			setTimeout(() => {
				expect(data).to.equal(true)
				done()
			}, 100)
		})
    })
})