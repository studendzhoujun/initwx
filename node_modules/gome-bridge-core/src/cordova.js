/*
 * @Author: liuxiaocong 
 * @Date: 2017-07-19 20:39:10 
 * @Last Modified by: liuxiaocong
 * @Last Modified time: 2017-08-15 16:24:06
 */
//define cordova
// 事件的处理和回调，外部访问cordova.js的入口 
// import channel from './channel'
// import platform from './platform'
var channel = require( './channel')
var platform = require( './platform')
const version = '1.0.0'
if(window.cordova && !(window.cordova instanceof HTMLElement)){
    throw new Error()
}
//备份window和document的监听事件
var m_document_addEventListener = document.addEventListener;
var m_document_removeEventListener = document.removeEventListener;
var m_window_addEventListener = window.addEventListener;
var m_window_removeEventListener = window.removeEventListener;
//保存自定义的document和window的事件监听器  
var documentEventHandlers = {},
    windowEventHandlers = {};
document.addEventListener = function(evt, handler, capture) {
    var e = evt.toLowerCase();
    if (typeof documentEventHandlers[e] != 'undefined') {
        documentEventHandlers[e].subscribe(handler);
    } else {
        m_document_addEventListener.call(document, evt, handler, capture);
    }
};
window.addEventListener = function(evt, handler, capture) {
    var e = evt.toLowerCase();
    if (typeof windowEventHandlers[e] != 'undefined') {
        windowEventHandlers[e].subscribe(handler);
    } else {
        m_window_addEventListener.call(window, evt, handler, capture);
    }
};
document.removeEventListener = function(evt, handler, capture) {
    var e = evt.toLowerCase();
    // If unsubscribing from an event that is handled by a plugin
    if (typeof documentEventHandlers[e] != "undefined") {
        documentEventHandlers[e].unsubscribe(handler);
    } else {
        m_document_removeEventListener.call(document, evt, handler, capture);
    }
};

window.removeEventListener = function(evt, handler, capture) {
    var e = evt.toLowerCase();
    // If unsubscribing from an event that is handled by a plugin
    if (typeof windowEventHandlers[e] != "undefined") {
        windowEventHandlers[e].unsubscribe(handler);
    } else {
        m_window_removeEventListener.call(window, evt, handler, capture);
    }
};
function createEvent(type, data){
    var event = document.createEvent('HTMLEvents')
    event.initEvent(type, false, false)
    if (data) {
        for(var i in data){
            if(data.hasOwnProperty(i)){
                event[i] = data[i]
            }
        }
    }
    return event
}
let cordova = {
    version : version,
    paltformId : platform.id,
    // 为了拦截document和window的事件监听器,添加或删除自定义的事件监听器
    addWindowEventHandler: function(event){
        return (windowEventHandlers[event] = channel.create(event));
    },
    addStickyDocumentEventHandler: function(event){
        return (documentEventHandlers[event] = channel.createSticky(event));
    },
    addDocumentEventHandler: function(event){
        return (documentEventHandlers[event] = channel.create(event))
    },
    removeWindowEventHandler: function(event){
        delete windowEventHandler[event]
    },
    removeDocumentEventHandler: function(event){
        delete documentEventHandlers[event]
    },
    //调用document事件
    fireDocumentEvent(type, data, bNoDetach){
        var evt = createEvent(type, data)
        if (typeof documentEventHandlers[type] != 'undefined') {
            if (bNoDetach) {
                documentEventHandlers[type].fire(evt);
            } else {
                setTimeout(function() {
                    // Fire deviceready on listeners that were registered before cordova.js was loaded.
                    if (type == 'deviceready') {
                        document.dispatchEvent(evt);
                    }
                    documentEventHandlers[type].fire(evt);
                }, 0);
            }
        } else {
            document.dispatchEvent(evt);
        }
    },
    fireWindowEvent (type, data) {
        let evt = createEvent(type, data);
        if (typeof windowEventHandlers[type] != 'undefined') {
            setTimeout(function() {
                windowEventHandlers[type].fire(evt);
            }, 0);
        } else {
            window.dispatchEvent(evt);
        }
    },
    callbackId: Math.floor(Math.random() * 2000000000),
    callbacks: {},
    callbackStatus: {
        NO_RESULT: 0,
        OK: 1,
        CLASS_NOT_FOUND_EXCEPTION: 2,
        ILLEGAL_ACCESS_EXCEPTION: 3,
        INSTANTIATION_EXCEPTION: 4,
        MALFORMED_URL_EXCEPTION: 5,
        IO_EXCEPTION: 6,
        INVALID_ACTION: 7,
        JSON_EXCEPTION: 8,
        ERROR: 9
    },
    callbackSuccess (callbackId, args) {
        cordova.callbackFromNative(callbackId, true, args.status, [args.message], args.keepCallback)
    },
    callbackError (callbackId, args) {
        cordova.callbackFromNative(callbackId, true, args.status, [args.message], args.keepCallback)
    },
    callbackFromNative (callbackId, isSuccess, status, args, keepCallback) {
        try {
            let callback = this.callbacks[callbackId]
            if (callback) {
                if(isSuccess && status == cordova.callbackStatus.OK){
                    callback.success && callback.success.apply(null, args)
                }else if(!isSuccess){
                    callback.fail && callback.fail.apply(null, args)
                }
                if(!keepCallback){
                    delete cordova.callbacks[callbackId]
                }
            }
        } catch(err){
            let msg = "Error in " + (isSuccess ? "Success" : "Error") + " callbackId: " + callbackId + " : " + err;
            console && console.log && console.log(msg)
            cordova.fireWindowEvent("cordovacallbackerror", {
                "message" : msg
            })
        }
    }
}
// window.cordova = cordova
module.exports = cordova
// export { cordova }