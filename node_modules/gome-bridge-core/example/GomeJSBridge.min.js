(function(){var PLATFORM_VERSION_BUILD_LABEL="1.0.0";var require,define;(function(){var modules={},requireStack=[],inProgressModules={},SEPARATOR=".";function build(module){var factory=module.factory,localRequire=function(id){var resultantId=id;if(id.charAt(0)==="."){resultantId=module.id.slice(0,module.id.lastIndexOf(SEPARATOR))+SEPARATOR+id.slice(2)}return require(resultantId)};module.exports={};delete module.factory;factory(localRequire,module.exports,module);return module.exports}require=function(id){if(!modules[id]){throw"module "+id+" not found"}else{if(id in inProgressModules){var cycle=requireStack.slice(inProgressModules[id]).join("->")+"->"+id;throw"Cycle in require graph: "+cycle}}if(modules[id].factory){try{inProgressModules[id]=requireStack.length;requireStack.push(id);return build(modules[id])}finally{delete inProgressModules[id];requireStack.pop()}}return modules[id].exports};define=function(id,factory){if(modules[id]){throw"module "+id+" already defined"}modules[id]={id:id,factory:factory}};define.remove=function(id){delete modules[id]};define.moduleMap=modules})();if(typeof module==="object"&&typeof require==="function"){module.exports.require=require;module.exports.define=define}define("cordova",function(require,exports,module){if(window.cordova&&!(window.cordova instanceof HTMLElement)){throw new Error("cordova already defined")}var channel=require("cordova/channel");var platform=require("cordova/platform");var m_document_addEventListener=document.addEventListener;var m_document_removeEventListener=document.removeEventListener;var m_window_addEventListener=window.addEventListener;var m_window_removeEventListener=window.removeEventListener;var documentEventHandlers={},windowEventHandlers={};document.addEventListener=function(evt,handler,capture){var e=evt.toLowerCase();if(typeof documentEventHandlers[e]!="undefined"){documentEventHandlers[e].subscribe(handler)}else{m_document_addEventListener.call(document,evt,handler,capture)}};window.addEventListener=function(evt,handler,capture){var e=evt.toLowerCase();if(typeof windowEventHandlers[e]!="undefined"){windowEventHandlers[e].subscribe(handler)}else{m_window_addEventListener.call(window,evt,handler,capture)}};document.removeEventListener=function(evt,handler,capture){var e=evt.toLowerCase();if(typeof documentEventHandlers[e]!="undefined"){documentEventHandlers[e].unsubscribe(handler)}else{m_document_removeEventListener.call(document,evt,handler,capture)}};window.removeEventListener=function(evt,handler,capture){var e=evt.toLowerCase();if(typeof windowEventHandlers[e]!="undefined"){windowEventHandlers[e].unsubscribe(handler)}else{m_window_removeEventListener.call(window,evt,handler,capture)}};function createEvent(type,data){var event=document.createEvent("Events");event.initEvent(type,false,false);if(data){for(var i in data){if(data.hasOwnProperty(i)){event[i]=data[i]}}}return event}var cordova={define:define,require:require,version:PLATFORM_VERSION_BUILD_LABEL,platformVersion:PLATFORM_VERSION_BUILD_LABEL,platformId:platform.id,addWindowEventHandler:function(event){return(windowEventHandlers[event]=channel.create(event))},addStickyDocumentEventHandler:function(event){return(documentEventHandlers[event]=channel.createSticky(event))},addDocumentEventHandler:function(event){return(documentEventHandlers[event]=channel.create(event))},removeWindowEventHandler:function(event){delete windowEventHandlers[event]},removeDocumentEventHandler:function(event){delete documentEventHandlers[event]},fireDocumentEvent:function(type,data,bNoDetach){var evt=createEvent(type,data);if(typeof documentEventHandlers[type]!="undefined"){if(bNoDetach){documentEventHandlers[type].fire(evt)}else{setTimeout(function(){if(type=="deviceready"){document.dispatchEvent(evt)}documentEventHandlers[type].fire(evt)},0)}}else{document.dispatchEvent(evt)}},fireWindowEvent:function(type,data){var evt=createEvent(type,data);if(typeof windowEventHandlers[type]!="undefined"){setTimeout(function(){windowEventHandlers[type].fire(evt)},0)}else{window.dispatchEvent(evt)}},callbackId:Math.floor(Math.random()*2000000000),callbacks:{},callbackStatus:{NO_RESULT:0,OK:1,CLASS_NOT_FOUND_EXCEPTION:2,ILLEGAL_ACCESS_EXCEPTION:3,INSTANTIATION_EXCEPTION:4,MALFORMED_URL_EXCEPTION:5,IO_EXCEPTION:6,INVALID_ACTION:7,JSON_EXCEPTION:8,ERROR:9},callbackSuccess:function(callbackId,args){cordova.callbackFromNative(callbackId,true,args.status,[args.message],args.keepCallback)},callbackError:function(callbackId,args){cordova.callbackFromNative(callbackId,false,args.status,[args.message],args.keepCallback)},callbackFromNative:function(callbackId,isSuccess,status,args,keepCallback){try{var callback=cordova.callbacks[callbackId];if(callback){if(isSuccess&&status==cordova.callbackStatus.OK){callback.success&&callback.success.apply(null,args)}else{if(!isSuccess){callback.fail&&callback.fail.apply(null,args)}}if(!keepCallback){delete cordova.callbacks[callbackId]}}}catch(err){var msg="Error in "+(isSuccess?"Success":"Error")+" callbackId: "+callbackId+" : "+err;
console&&console.log&&console.log(msg);cordova.fireWindowEvent("cordovacallbackerror",{"message":msg});throw err}}};module.exports=cordova});define("cordova/android/nativeapiprovider",function(require,exports,module){var nativeApi=this._cordovaNative||require("cordova/android/promptbasednativeapi");var currentApi=nativeApi;module.exports={get:function(){return currentApi},setPreferPrompt:function(value){currentApi=value?require("cordova/android/promptbasednativeapi"):nativeApi},set:function(value){currentApi=value}}});define("cordova/android/promptbasednativeapi",function(require,exports,module){module.exports={exec:function(bridgeSecret,service,action,callbackId,argsJson){return prompt(argsJson,"gap:"+JSON.stringify([bridgeSecret,service,action,callbackId]))},setNativeToJsBridgeMode:function(bridgeSecret,value){prompt(value,"gap_bridge_mode:"+bridgeSecret)},retrieveJsMessages:function(bridgeSecret,fromOnlineEvent){return prompt(+fromOnlineEvent,"gap_poll:"+bridgeSecret)}}});define("cordova/base64",function(require,exports,module){var base64=exports;base64.fromArrayBuffer=function(arrayBuffer){var array=new Uint8Array(arrayBuffer);return uint8ToBase64(array)};base64.toArrayBuffer=function(str){var decodedStr=typeof atob!="undefined"?atob(str):new Buffer(str,"base64").toString("binary");var arrayBuffer=new ArrayBuffer(decodedStr.length);var array=new Uint8Array(arrayBuffer);for(var i=0,len=decodedStr.length;i<len;i++){array[i]=decodedStr.charCodeAt(i)}return arrayBuffer};function uint8ToBase64(rawData){var numBytes=rawData.byteLength;var output="";var segment;var table=b64_12bitTable();for(var i=0;i<numBytes-2;i+=3){segment=(rawData[i]<<16)+(rawData[i+1]<<8)+rawData[i+2];output+=table[segment>>12];output+=table[segment&4095]}if(numBytes-i==2){segment=(rawData[i]<<16)+(rawData[i+1]<<8);output+=table[segment>>12];output+=b64_6bit[(segment&4095)>>6];output+="="}else{if(numBytes-i==1){segment=(rawData[i]<<16);output+=table[segment>>12];output+="=="}}return output}});define("cordova/channel",function(require,exports,module){var utils=require("cordova/utils"),nextGuid=1;var Channel=function(type,sticky){this.type=type;this.handlers={};this.state=sticky?1:0;this.fireArgs=null;this.numHandlers=0;this.onHasSubscribersChange=null},channel={join:function(h,c){var len=c.length,i=len,f=function(){if(!(--i)){h()}};for(var j=0;j<len;j++){if(c[j].state===0){throw Error("Can only use join with sticky channels.")}c[j].subscribe(f)}if(!len){h()}},create:function(type){return channel[type]=new Channel(type,false)},createSticky:function(type){return channel[type]=new Channel(type,true)},deviceReadyChannelsArray:[],deviceReadyChannelsMap:{},waitForInitialization:function(feature){if(feature){var c=channel[feature]||this.createSticky(feature);this.deviceReadyChannelsMap[feature]=c;this.deviceReadyChannelsArray.push(c)}}};function forceFunction(f){if(typeof f!="function"){throw"Function required as first argument!"}}Channel.prototype.subscribe=function(f,c){forceFunction(f);if(this.state==2){f.apply(c||this,this.fireArgs);return}var func=f,guid=f.observer_guid;if(typeof c=="object"){func=utils.close(c,f)}if(!guid){guid=""+nextGuid++}func.observer_guid=guid;f.observer_guid=guid;if(!this.handlers[guid]){this.handlers[guid]=func;this.numHandlers++;if(this.numHandlers==1){this.onHasSubscribersChange&&this.onHasSubscribersChange()}}};Channel.prototype.unsubscribe=function(f){forceFunction(f);var guid=f.observer_guid,handler=this.handlers[guid];if(handler){delete this.handlers[guid];this.numHandlers--;if(this.numHandlers===0){this.onHasSubscribersChange&&this.onHasSubscribersChange()}}};Channel.prototype.fire=function(e){var fail=false,fireArgs=Array.prototype.slice.call(arguments);if(this.state==1){this.state=2;this.fireArgs=fireArgs}if(this.numHandlers){var toCall=[];for(var item in this.handlers){toCall.push(this.handlers[item])}for(var i=0;i<toCall.length;++i){toCall[i].apply(this,fireArgs)}if(this.state==2&&this.numHandlers){this.numHandlers=0;this.handlers={};this.onHasSubscribersChange&&this.onHasSubscribersChange()}}};channel.createSticky("onDOMContentLoaded");channel.createSticky("onNativeReady");channel.createSticky("onCordovaReady");channel.createSticky("onDeviceReady");channel.create("onResume");channel.create("onPause");channel.waitForInitialization("onCordovaReady");channel.waitForInitialization("onDOMContentLoaded");module.exports=channel});define("cordova/exec",function(require,exports,module){var platform=require("cordova/platform");if(platform.id=="android"){module.exports=require("cordova/moudleANDExec")}else{module.exports=require("cordova/moudleIOSExec")}});define("cordova/moudleANDExec",function(require,exports,module){var cordova=require("cordova"),nativeApiProvider=require("cordova/android/nativeapiprovider"),utils=require("cordova/utils"),base64=require("cordova/base64"),channel=require("cordova/channel"),jsToNativeModes={PROMPT:0,JS_OBJECT:1},nativeToJsModes={POLLING:0,LOAD_URL:1,ONLINE_EVENT:2},jsToNativeBridgeMode,nativeToJsBridgeMode=nativeToJsModes.ONLINE_EVENT,pollEnabled=false,bridgeSecret=-1;
var messagesFromNative=[];var isProcessing=false;var resolvedPromise=typeof Promise=="undefined"?null:Promise.resolve();var nextTick=resolvedPromise?function(fn){resolvedPromise.then(fn)}:function(fn){setTimeout(fn)};function androidExec(success,fail,service,action,args){if(bridgeSecret<0){throw new Error("exec() called without bridgeSecret")}if(jsToNativeBridgeMode===undefined){androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT)}var callbackId=service+cordova.callbackId++,argsJson=JSON.stringify(args);if(success||fail){cordova.callbacks[callbackId]={success:success,fail:fail}}var msgs=nativeApiProvider.get().exec(bridgeSecret,service,action,callbackId,argsJson);if(jsToNativeBridgeMode==jsToNativeModes.JS_OBJECT&&msgs==="@Null arguments."){androidExec.setJsToNativeBridgeMode(jsToNativeModes.PROMPT);androidExec(success,fail,service,action,args);androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT)}else{if(msgs){messagesFromNative.push(msgs);nextTick(processMessages)}}}androidExec.init=function(){bridgeSecret=+prompt("","gap_init:"+nativeToJsBridgeMode);channel.onNativeReady.fire()};function pollOnceFromOnlineEvent(){pollOnce(true)}function pollOnce(opt_fromOnlineEvent){if(bridgeSecret<0){return}var msgs=nativeApiProvider.get().retrieveJsMessages(bridgeSecret,!!opt_fromOnlineEvent);if(msgs){messagesFromNative.push(msgs);processMessages()}}function pollingTimerFunc(){if(pollEnabled){pollOnce();setTimeout(pollingTimerFunc,50)}}function hookOnlineApis(){function proxyEvent(e){cordova.fireWindowEvent(e.type)}window.addEventListener("online",pollOnceFromOnlineEvent,false);window.addEventListener("offline",pollOnceFromOnlineEvent,false);cordova.addWindowEventHandler("online");cordova.addWindowEventHandler("offline");document.addEventListener("online",proxyEvent,false);document.addEventListener("offline",proxyEvent,false)}hookOnlineApis();androidExec.jsToNativeModes=jsToNativeModes;androidExec.nativeToJsModes=nativeToJsModes;androidExec.setJsToNativeBridgeMode=function(mode){if(mode==jsToNativeModes.JS_OBJECT&&!window._cordovaNative){mode=jsToNativeModes.PROMPT}nativeApiProvider.setPreferPrompt(mode==jsToNativeModes.PROMPT);jsToNativeBridgeMode=mode};androidExec.setNativeToJsBridgeMode=function(mode){if(mode==nativeToJsBridgeMode){return}if(nativeToJsBridgeMode==nativeToJsModes.POLLING){pollEnabled=false}nativeToJsBridgeMode=mode;if(bridgeSecret>=0){nativeApiProvider.get().setNativeToJsBridgeMode(bridgeSecret,mode)}if(mode==nativeToJsModes.POLLING){pollEnabled=true;setTimeout(pollingTimerFunc,1)}};function buildPayload(payload,message){var payloadKind=message.charAt(0);if(payloadKind=="s"){payload.push(message.slice(1))}else{if(payloadKind=="t"){payload.push(true)}else{if(payloadKind=="f"){payload.push(false)}else{if(payloadKind=="N"){payload.push(null)}else{if(payloadKind=="n"){payload.push(+message.slice(1))}else{if(payloadKind=="A"){var data=message.slice(1);payload.push(base64.toArrayBuffer(data))}else{if(payloadKind=="S"){payload.push(window.atob(message.slice(1)))}else{if(payloadKind=="M"){var multipartMessages=message.slice(1);while(multipartMessages!==""){var spaceIdx=multipartMessages.indexOf(" ");var msgLen=+multipartMessages.slice(0,spaceIdx);var multipartMessage=multipartMessages.substr(spaceIdx+1,msgLen);multipartMessages=multipartMessages.slice(spaceIdx+msgLen+1);buildPayload(payload,multipartMessage)}}else{payload.push(JSON.parse(message))}}}}}}}}}function processMessage(message){var firstChar=message.charAt(0);if(firstChar=="J"){eval(message.slice(1))}else{if(firstChar=="S"||firstChar=="F"){var success=firstChar=="S";var keepCallback=message.charAt(1)=="1";var spaceIdx=message.indexOf(" ",2);var status=+message.slice(2,spaceIdx);var nextSpaceIdx=message.indexOf(" ",spaceIdx+1);var callbackId=message.slice(spaceIdx+1,nextSpaceIdx);var payloadMessage=message.slice(nextSpaceIdx+1);var payload=[];buildPayload(payload,payloadMessage);cordova.callbackFromNative(callbackId,success,status,payload,keepCallback)}else{console.log("processMessage failed: invalid message: "+JSON.stringify(message))}}}function processMessages(){if(isProcessing){return}if(messagesFromNative.length===0){return}isProcessing=true;try{var msg=popMessageFromQueue();if(msg=="*"&&messagesFromNative.length===0){nextTick(pollOnce);return}processMessage(msg)}finally{isProcessing=false;if(messagesFromNative.length>0){nextTick(processMessages)}}}function popMessageFromQueue(){var messageBatch=messagesFromNative.shift();if(messageBatch=="*"){return"*"}var spaceIdx=messageBatch.indexOf(" ");var msgLen=+messageBatch.slice(0,spaceIdx);var message=messageBatch.substr(spaceIdx+1,msgLen);messageBatch=messageBatch.slice(spaceIdx+msgLen+1);if(messageBatch){messagesFromNative.unshift(messageBatch)}return message}module.exports=androidExec});define("cordova/moudleIOSExec",function(require,exports,module){var cordova=require("cordova"),channel=require("cordova/channel"),utils=require("cordova/utils"),base64=require("cordova/base64"),jsToNativeModes={IFRAME_NAV:0,XHR_NO_PAYLOAD:1,XHR_WITH_PAYLOAD:2,XHR_OPTIONAL_PAYLOAD:3,IFRAME_HASH_NO_PAYLOAD:4,IFRAME_HASH_WITH_PAYLOAD:5,WK_WEBVIEW_BINDING:6},bridgeMode,execXhr,requestCount=0,vcHeaderValue=null,commandQueue=[],isInContextOfEvalJs=0,failSafeTimerId=0;
function shouldBundleCommandJson(){if(bridgeMode===jsToNativeModes.XHR_WITH_PAYLOAD){return true}if(bridgeMode===jsToNativeModes.XHR_OPTIONAL_PAYLOAD){var payloadLength=0;for(var i=0;i<commandQueue.length;++i){payloadLength+=commandQueue[i].length}return payloadLength<4500}return false}function massageArgsJsToNative(args){if(!args||utils.typeName(args)!="Array"){return args}var ret=[];args.forEach(function(arg,i){if(utils.typeName(arg)=="ArrayBuffer"){ret.push({"CDVType":"ArrayBuffer","data":base64.fromArrayBuffer(arg)})}else{ret.push(arg)}});return ret}function massageMessageNativeToJs(message){if(message.CDVType=="ArrayBuffer"){var stringToArrayBuffer=function(str){var ret=new Uint8Array(str.length);for(var i=0;i<str.length;i++){ret[i]=str.charCodeAt(i)}return ret.buffer};var base64ToArrayBuffer=function(b64){return stringToArrayBuffer(atob(b64))};message=base64ToArrayBuffer(message.data)}return message}function convertMessageToArgsNativeToJs(message){var args=[];if(!message||!message.hasOwnProperty("CDVType")){args.push(message)}else{if(message.CDVType=="MultiPart"){message.messages.forEach(function(e){args.push(massageMessageNativeToJs(e))})}else{args.push(massageMessageNativeToJs(message))}}return args}function iOSExec(){if(bridgeMode===undefined){bridgeMode=jsToNativeModes.IFRAME_NAV}if(window.webkit&&window.webkit.messageHandlers&&window.webkit.messageHandlers.cordova&&window.webkit.messageHandlers.cordova.postMessage){bridgeMode=jsToNativeModes.WK_WEBVIEW_BINDING}var successCallback,failCallback,service,action,actionArgs,splitCommand;var callbackId=null;if(typeof arguments[0]!=="string"){successCallback=arguments[0];failCallback=arguments[1];service=arguments[2];action=arguments[3];actionArgs=arguments[4];callbackId="INVALID"}else{try{splitCommand=arguments[0].split(".");action=splitCommand.pop();service=splitCommand.join(".");actionArgs=Array.prototype.splice.call(arguments,1);console.log("The old format of this exec call has been removed (deprecated since 2.1). Change to: "+'cordova.exec(null, null, "'+service+'", "'+action+'",'+JSON.stringify(actionArgs)+");");return}catch(e){}}actionArgs=actionArgs||[];if(successCallback||failCallback){callbackId=service+cordova.callbackId++;cordova.callbacks[callbackId]={success:successCallback,fail:failCallback}}actionArgs=massageArgsJsToNative(actionArgs);var command=[callbackId,service,action,actionArgs];commandQueue.push(JSON.stringify(command));if(bridgeMode===jsToNativeModes.WK_WEBVIEW_BINDING){window.webkit.messageHandlers.cordova.postMessage(command)}else{if(!isInContextOfEvalJs&&commandQueue.length==1){pokeNativeViaXhr()}}}function pokeNativeViaXhr(){if(execXhr&&execXhr.readyState!=4){execXhr=null}execXhr=execXhr||new XMLHttpRequest();execXhr.open("HEAD","/!gap_exec?"+(+new Date()),true);if(!vcHeaderValue){vcHeaderValue=/.*\((.*)\)$/.exec(navigator.userAgent)[1]}execXhr.setRequestHeader("vc",vcHeaderValue);execXhr.setRequestHeader("rc",++requestCount);if(shouldBundleCommandJson()){execXhr.setRequestHeader("cmds",iOSExec.nativeFetchMessages())}execXhr.send(null)}iOSExec.jsToNativeModes=jsToNativeModes;iOSExec.nativeFetchMessages=function(){if(failSafeTimerId){clearTimeout(failSafeTimerId);failSafeTimerId=0}if(!commandQueue.length){return""}var json="["+commandQueue.join(",")+"]";commandQueue.length=0;return json};iOSExec.nativeCallback=function(callbackId,status,message,keepCallback){return iOSExec.nativeEvalAndFetch(function(){var success=status===0||status===1;var args=convertMessageToArgsNativeToJs(message);cordova.callbackFromNative(callbackId,success,status,args,keepCallback)})};iOSExec.nativeEvalAndFetch=function(func){isInContextOfEvalJs++;try{func();return iOSExec.nativeFetchMessages()}finally{isInContextOfEvalJs--}};module.exports=iOSExec});define("cordova/init",function(require,exports,module){var channel=require("cordova/channel");var cordova=require("cordova");var platform=require("cordova/platform");var utils=require("cordova/utils");var platformInitChannelsArray=[channel.onNativeReady];function logUnfiredChannels(arr){for(var i=0;i<arr.length;++i){if(arr[i].state!=2){console.log("Channel not fired: "+arr[i].type)}}}window.setTimeout(function(){if(channel.onDeviceReady.state!=2){console.log("deviceready has not fired after 5 seconds.");logUnfiredChannels(platformInitChannelsArray);logUnfiredChannels(channel.deviceReadyChannelsArray)}},5000);channel.onPause=cordova.addDocumentEventHandler("pause");channel.onResume=cordova.addDocumentEventHandler("resume");channel.onActivated=cordova.addDocumentEventHandler("activated");channel.onDeviceReady=cordova.addStickyDocumentEventHandler("deviceready");if(document.readyState=="complete"||document.readyState=="interactive"){channel.onDOMContentLoaded.fire()}else{document.addEventListener("DOMContentLoaded",function(){channel.onDOMContentLoaded.fire()},false)}if(window._nativeReady){channel.onNativeReady.fire()}platform.bootstrap&&platform.bootstrap();channel.join(function(){channel.onCordovaReady.fire();
channel.join(function(){require("cordova").fireDocumentEvent("deviceready")},channel.deviceReadyChannelsArray)},platformInitChannelsArray)});define("cordova/platform",function(require,exports,module){var system="";if(window.navigator.userAgent.match(/android/i)){system="android"}else{if(window.navigator.userAgent.match(/iPhone|iPad/i)){system="ios"}}module.exports={id:system,bootstrap:function(){var channel=require("cordova/channel"),cordova=require("cordova"),exec=require("cordova/exec");var APP_PLUGIN_NAME="CoreAndroid";if(system=="android"){exec.init();channel.onCordovaReady.subscribe(function(){exec(onMessageFromNative,null,APP_PLUGIN_NAME,"messageChannel",[]);exec(null,null,APP_PLUGIN_NAME,"show",[])})}else{require("cordova/channel").onNativeReady.fire()}}};function onMessageFromNative(msg){var cordova=require("cordova");var action=msg.action;switch(action){case"backbutton":case"menubutton":case"searchbutton":case"pause":case"resume":case"volumedownbutton":case"volumeupbutton":cordova.fireDocumentEvent(action);break;default:throw new Error("Unknown event action "+action)}}});define("cordova/utils",function(require,exports,module){var utils=exports;utils.typeName=function(val){return Object.prototype.toString.call(val).slice(8,-1)};utils.close=function(context,func,params){return function(){var args=params||arguments;return func.apply(context,args)}}});define("cordova/Bridge",function(require,exports,module){var exec=require("cordova/exec");cordova.exec=exec;var Bridge={};Bridge={isLogin:function(ok,fail){exec(ok,fail,"Login","isLogin",[])},login:function(ok,fail,param){exec(function(){if(param.refresh){window.location.reload();ok()}else{ok()}},null,"Login","showLoginView",[])},getUserInfo:function(ok,fail){exec(ok,fail,"Login","getUserInfo",[])},toast:function(ok,fail,args){exec(ok,fail,"View","toast",[args])},callShareComp:function(ok,fail,args){exec(ok,fail,"Share","showNativeShareComponent",[args])},fetch:function(ok,fail,args){exec(ok,fail,"Network","sendRequest",[args])},popWindow:function(){exec(null,null,"Route","close",[])},pushWindow:function(ok,fail,args){exec(ok,fail,"Route","open",[args])},setHeadBar:function(ok,fail,args){exec(ok,fail,"View","initTitleBar",[args])},getLocation:function(ok,fail){exec(ok,fail,"Location","getInfo",[])},getDeviceId:function(ok,fail){exec(ok,fail,"Device1","getInfo",[])},showLoadingComp:function(ok,fail,args){exec(ok,fail,"View","showLoading",[args])},hideLoadingComp:function(ok,fail){exec(ok,fail,"View","hideLoading",[])},showErrorComp:function(ok,fail,args){exec(ok,fail,"View","showErrorView",[args])},hideErrorComp:function(ok,fail){exec(ok,fail,"View","hideErrorView",[])}};module.exports=Bridge});window.cordova=require("cordova");require("cordova/init");window.GomeJSBridge=require("cordova/Bridge")})();