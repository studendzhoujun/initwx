/*
 * @Author: zhaoye 
 * @Date: 2017-11-08 20:38:37 
 * @Last Modified by: liuxiaocong
 * @Last Modified time: 2018-03-06 15:05:11
 */
import {location, navigator} from 'gome-utils-bom'
import {env, system} from '../index.js'
const expect = chai.expect
// 国美app
describe('当环境是国美app/Android', _ => {
    let stub
    before(function() {
        stub = sinon.stub(navigator, 'getUserAgent')
        // android
        stub.callsFake(function(){
            return 'Mozilla/5.0 (Linux; Android 5.1.1; SM-N9100 Build/LMY47X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.121 Mobile Safari/537.36 /gomeplus/103/355848061160704/Plus/5.1.1/WIFI/1440*2560/gome/'
        })
    })
    after(function() {
        stub.restore()
    })
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.mobile应该等于true', () => {
        expect(env.mobile).to.equal(true)
    })
    it('env.pc应该等于false', () => {
        expect(env.pc).to.equal(false)
    })
    it('system.android应该等于true', () => {
        expect(system.android).to.equal(true)
    })
    it('system.ios应该等于false', () => {
        expect(system.ios).to.equal(false)
    })
})

describe('当环境是国美app/iOS', _ => {
    let stub
    before(function() {
        stub = sinon.stub(navigator, 'getUserAgent')
        // iOS
        stub.callsFake(function(){
            return 'Mozilla/5.0 (iPhone; CPU iPhone OS 10.3.1 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Mobile/11B508/gomeplus/iphone/103/7aa6a0fa-c729-4899-9b15-8d96b5909458/10.3.1/WIFI/320*568/gome/8962CE878A934E86-B61A-C126DE9BB9A8'
        })
    })
    after(function() {
        stub.restore()
    })
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.mobile应该等于true', () => {
        expect(env.mobile).to.equal(true)
    })
    it('env.pc应该等于false', () => {
        expect(env.pc).to.equal(false)
    })
    it('system.android应该等于false', () => {
        expect(system.android).to.equal(false)
    })
    it('system.ios应该等于true', () => {
        expect(system.ios).to.equal(true)
    })
    
})
describe('当前环境是国美管家APP/android', _ =>{
    let stub
    before(function() {
        stub = sinon.stub(navigator, 'getUserAgent')
        stub.callsFake(function(){
            return 'Mozilla/5.0 (Linux; Android 6.0.1; SM-A5100 Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36 /gomegj/101/355521073048353/Plus/6.0.1/WIFI/1080*1920/'
        })
    })
    after(function() {
        stub.restore()
    })
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.mobile应该等于true', () => {
        expect(env.mobile).to.equal(true)
    })
    it('env.pc应该等于false', () => {
        expect(env.pc).to.equal(false)
    })
    it('system.android应该等于true', () => {
        expect(system.android).to.equal(true)
    })
    it('system.ios应该等于false', () => {
        expect(system.ios).to.equal(false)
    })
    it('env.gomegj应该等于true',() => {
        expect(env.gomegj).to.equal(true)
    })
})
describe('当环境是国美管家app/iOS', _ => {
    let stub
    before(function() {
        stub = sinon.stub(navigator, 'getUserAgent')
        // iOS
        stub.callsFake(function(){
            return 'Mozilla/5.0 (iPhone; CPU iPhone OS 11.1 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Mobile/11B508/gomegj/iphone/1/aa5e75b8-db8c-4752-a266-1dd95fbc8065/11.1/WIFI/414*736/gomegj/36E5B973C6284CBE-B6D8-F2B534CE9703'
        })
    })
    after(function() {
        stub.restore()
    })
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.mobile应该等于true', () => {
        expect(env.mobile).to.equal(true)
    })
    it('env.pc应该等于false', () => {
        expect(env.pc).to.equal(false)
    })
    it('system.android应该等于false', () => {
        expect(system.android).to.equal(false)
    })
    it('system.ios应该等于true', () => {
        expect(system.ios).to.equal(true)
    })
    it('env.gomegj应该等于true',()=>{
        expect(env.gomegj).to.equal(true)
    })
})
// gomemeidian
describe('当前环境是国美美店APP/android', _ =>{
    let stub
    before(function() {
        stub = sinon.stub(navigator, 'getUserAgent')
        stub.callsFake(function(){
            return 'Mozilla/5.0 (Linux; Android 6.0.1; SM-N9100 Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36/GomeMeidian/1.0.0/355848061160704/android/6.0.1/'
        })
    })
    after(function() {
        stub.restore()
    })
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.mobile应该等于true', () => {
        expect(env.mobile).to.equal(true)
    })
    it('env.pc应该等于false', () => {
        expect(env.pc).to.equal(false)
    })
    it('system.android应该等于true', () => {
        expect(system.android).to.equal(true)
    })
    it('system.ios应该等于false', () => {
        expect(system.ios).to.equal(false)
    })
    it('env.gomemeidian应该等于true',() => {
        expect(env.gomemeidian).to.equal(true)
    })
})
describe('当环境是国美美店app/iOS', _ => {
    let stub
    before(function() {
        stub = sinon.stub(navigator, 'getUserAgent')
        // iOS
        stub.callsFake(function(){
            return 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_0 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13A344/GomeMeidian/1.0.0/8F64BC01-BF57-45AD-B85F-301BC4468D8A/iOS/9.0/'
        })
    })
    after(function() {
        stub.restore()
    })
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.mobile应该等于true', () => {
        expect(env.mobile).to.equal(true)
    })
    it('env.pc应该等于false', () => {
        expect(env.pc).to.equal(false)
    })
    it('system.android应该等于false', () => {
        expect(system.android).to.equal(false)
    })
    it('system.ios应该等于true', () => {
        expect(system.ios).to.equal(true)
    })
    it('env.gomemeidian应该等于true',()=>{
        expect(env.gomemeidian).to.equal(true)
    })
})
describe('当环境是pc普通浏览器', _ => {
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于false', () => {
        expect(env.app).to.equal(false)
    })
    it('env.pc应该等于true', () => {
        expect(env.pc).to.equal(true)
    })
    it('env.mobile应该等于false', () => {
        expect(env.mobile).to.equal(false)
    })
    it('system.android应该等于false', () => {
        expect(system.android).to.equal(false)
    })
    it('system.ios应该等于false', () => {
        expect(system.ios).to.equal(false)
    })
    it('env.hybrid应该为false', () => {
        expect(env.hybrid).to.equal(false)
    })
})

function locationStubFactory (stubs, host, protocol) {
    stubs[0] = sinon.stub(location, 'getHref')
    stubs[1] = sinon.stub(location, 'getHost')
    stubs[2] = sinon.stub(location, 'getProtocol')
    stubs[0].callsFake(() => {
        return `${protocol}//${host}/index.html`
    })
    stubs[1].callsFake(() => {
        return host
    })
    stubs[2].callsFake(() => {
        return protocol
    })
}
describe('当环境是线上环境', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, 'm.gome.com.cn', 'http:')
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.live应该等于true', () => {
        expect(env.live).to.equal(true)
    })
    it('env.uat应该等于false', () => {
        expect(env.uat).to.equal(false)
    })
    it('env.tslive应该等于false', () => {
        expect(env.tslive).to.equal(false)
    })
})
describe('当环境是uat/uatplus环境', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, 'm.uatplus.com', 'http:')
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.uat应该等于true', () => {
        expect(env.uat).to.equal(true)
    })
    it('env.live应该等于false', () => {
        expect(env.live).to.equal(false)
    })
    it('env.tslive应该等于false', () => {
        expect(env.tslive).to.equal(false)
    })
})
describe('当环境是uat/atguat环境', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, 'm.atguat.com.cn', 'http:')
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.uat应该等于true', () => {
        expect(env.uat).to.equal(true)
    })
    it('env.live应该等于false', () => {
        expect(env.live).to.equal(false)
    })
    it('env.tslive应该等于false', () => {
        expect(env.tslive).to.equal(false)
    })
})
describe('当环境是tslive/tsliveplus环境', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, 'm.tsliveplus.com', 'http:')
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.tslive应该等于true', () => {
        expect(env.tslive).to.equal(true)
    })
    it('env.live应该等于false', () => {
        expect(env.live).to.equal(false)
    })
    it('env.uat应该等于false', () => {
        expect(env.uat).to.equal(false)
    })
})
describe('当环境是tslive/tslive.com.cn环境', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, 'm.tslive.com.cn', 'http:')
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.tslive应该等于true', () => {
        expect(env.tslive).to.equal(true)
    })
    it('env.live应该等于false', () => {
        expect(env.live).to.equal(false)
    })
    it('env.uat应该等于false', () => {
        expect(env.uat).to.equal(false)
    })
})
describe('当环境是混合app环境', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, '/foo/bar/index.html', 'file:')
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.hybrid应该为真', () => {
        expect(env.hybrid).to.equal(true)
    })
    it('env.app应该为真', () => {
        expect(env.app).to.equal(true)
    })
    it('env.wap应该为假', () => {
        expect(env.wap).to.equal(false)
    })
})
describe('当环境是混合app/dev环境', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, 'm.tslive.com.cn', 'http:')
        const stub = sinon.stub(navigator, 'getUserAgent')
        stub.callsFake(() => {
            return 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1/dev'
        })
        stubs.push(stub)
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.dev应该为true', () => {
        expect(env.dev).to.equal(true)
    })
    it('env.hybrid应该为true', () => {
        expect(env.hybrid).to.equal(true)
    })
    it('env.app应该为true', () => {
        expect(env.app).to.equal(true)
    })
})
// TODO 模拟微博
// TODO 模拟微信
// TODO 模拟QQ

describe('当环境是unknown,非国美环境', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, 'm.jd.com', 'http:')
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.unknown应该等于true', () => {
        expect(env.unknown).to.equal(true)
    })
})

// 测试set方法
// describe('测试wap的set方法' , _=>{
//     before(function(){
//         env.wap = false
//     })
//     it('env.wap应该true', () => {  
//         // expect(env.wap = true).to.equal(true)
//         expect(env.wap).to.equal(false)
//     })
// })
// describe('测试wap的set方法' , _=>{
//     before(function(){
//         env.wap = false
//     })
//     it('env.wap应该false', () => {  
//         // expect(env.wap = true).to.equal(true)
//         expect(env.wap).to.equal(false)
//     })
// })
// describe('测试app的set方法' , _=>{
//     before(function(){
//         env.app = false
//     })
//     it('env.app应该true', () => {  
//         expect(env.app = true).to.equal(true)
//         expect(env.app).to.equal(false)
//     })
// })
// 不知为何 一直通不过
// describe('测试hybrid的set方法' , _=>{
//     before(function(){
//         env.hybrid = true
//     })
//     it('env.hybrid应该true', () => {  
//         // expect(env.app = true).to.equal(true)
//         expect(env.hybrid).to.equal(true)
//     })
// })
// describe('当环境是混合app环境' , _=>{
//     const stubs = []
//     before(function() {
//         locationStubFactory(stubs, '/foo/bar/index.html', 'file:')
//         env.hybrid = false
//     })
//     after(function() {
//         stubs.map(stub => stub.restore())
//     })
//     it('env.hybrid应该false', () => {  
//         // expect(env.hybrid = false).to.be.true
//         expect(env.hybrid).to.be.false
//     })
// })
// describe('设置env.dev为true',_=>{
//     before(function(){
//         env.dev = true
//     })
//     after(function(){

//     })
//     it('env.dev 应为等于true',_=>{
//         expect(env.dev).to.equal(true)
//     })
// })
// describe('设置env.live为true',_=>{
//     before(function(){
//         env.live = true
//     })
//     it('env.live 应为等于true',_=>{
//         expect(env.live).to.equal(true)
//     })
// })
window.PackConfig = {
    PLATFORM:'APP',
    ENV : 'LIVE'
}
describe('当环境是unknown(非国美环境),并且有window.PackConfig', _ => {
    const stubs = []
    before(function() {
        locationStubFactory(stubs, 'm.jd.com', 'http:')
        window.PackConfig = {
            PLATFORM:'APP',
            ENV : 'LIVE'
        }
        env[PackConfig.PLATFORM.toLowerCase()] = true
        env[PackConfig.ENV.toLowerCase()] = true
    })
    after(function() {
        stubs.map(stub => stub.restore())
    })
    it('env.unknown应该等于true', () => {
        expect(env.unknown).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.live应该等于true', () => {
        expect(env.live).to.equal(true)
    })
})

describe('当环境是国美备份app/iOS', _ => {
    let stub
    before(function() {
        stub = sinon.stub(navigator, 'getUserAgent')
        // iOS
        stub.callsFake(function(){
            return 'Mozilla/5.0 (iPhone; CPU iPhone OS 10.3.1 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Mobile/11B508/gomebackup/iphone/103/7aa6a0fa-c729-4899-9b15-8d96b5909458/10.3.1/WIFI/320*568/gome/8962CE878A934E86-B61A-C126DE9BB9A8'
        })
    })
    after(function() {
        stub.restore()
    })
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.mobile应该等于true', () => {
        expect(env.mobile).to.equal(true)
    })
    it('env.pc应该等于false', () => {
        expect(env.pc).to.equal(false)
    })
    it('system.android应该等于false', () => {
        expect(system.android).to.equal(false)
    })
    it('system.ios应该等于true', () => {
        expect(system.ios).to.equal(true)
    })
    it('env.gomebackup应该等于true', () => {
        expect(env.gomebackup).to.equal(true)
    })
})

describe('当环境是国美备份app/Android', _ => {
    let stub
    before(function() {
        stub = sinon.stub(navigator, 'getUserAgent')
        // android
        stub.callsFake(function(){
            return 'Mozilla/5.0 (Linux; Android 5.1.1; SM-N9100 Build/LMY47X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.121 Mobile Safari/537.36 /gomebackup/103/355848061160704/Plus/5.1.1/WIFI/1440*2560/gome/'
        })
    })
    after(function() {
        stub.restore()
    })
    it('env.wap应该等于true', () => {
        expect(env.wap).to.equal(true)
    })
    it('env.app应该等于true', () => {
        expect(env.app).to.equal(true)
    })
    it('env.mobile应该等于true', () => {
        expect(env.mobile).to.equal(true)
    })
    it('env.pc应该等于false', () => {
        expect(env.pc).to.equal(false)
    })
    it('system.android应该等于true', () => {
        expect(system.android).to.equal(true)
    })
    it('system.ios应该等于false', () => {
        expect(system.ios).to.equal(false)
    })
    it('env.gomebackup应该等于true', () => {
        expect(env.gomebackup).to.equal(true)
    })
})