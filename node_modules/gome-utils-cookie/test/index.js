/*
 * @Author: zhaoye 
 * @Date: 2017-11-08 20:38:37 
 * @Last Modified by: zhaoye
 * @Last Modified time: 2018-01-10 21:08:02
 */
const expect = chai.expect
import cookie from '../index.js'

//reset测试条件
describe('cookie为空时解析cookie', _ => {
    let stub = sinon.stub(document, 'cookie')
    before(() => {
        stub.get(function(){
            return ''
        })
    })
    it('应该为空对象', () => {
        expect(cookie.parse()).to.be.a('object')
        expect(cookie.parse()).to.be.empty
    })
    after(() => {
        stub.restore()
    })
})

describe('cookie.set: 设置默认', _ => {
    it('设置Number应该成功', () => {
        cookie.set('no', 1)
        const no = cookie.parse().no
        expect(no).to.be.a('string')
        expect(no).to.equal('1')
    })
    it('设置String应该成功', () => {
        cookie.set('str', 'string_test')
        const result = cookie.parse()
        expect(result.str).to.be.a('string')
    })
    it('设置Bool:true应该成功，且为字符串格式', done => {
        cookie.set('bool_true', true)
        const result = cookie.parse()
        expect(result.bool_true).to.equal(true)
    })
    it('设置Bool:false应该成功，且为字符串格式', done => {
        cookie.set('bool_false', false)
        const result = cookie.parse()
        expect(result.bool_false).to.equal(false)
    })
    it('设置数组应该成功', () => {
        cookie.set('arr', [1,2,3])
        const result = cookie.parse()
        expect(result.arr).to.be.a('array')
    })
    it('设置对象应该成功', () => {
        cookie.set('obj', {a:1,b:2})
        const result = cookie.parse()
        expect(result.obj).to.be.a('object')
    })
    it('设置深层对象应该成功', () => {
        cookie.set('deep_obj', {a:1,b:2,c:{d:3}})
        const result = cookie.parse()
        expect(result.deep_obj).to.be.a('object')
        expect(result.deep_obj.c).to.be.a('object')
    })
})

describe('cookie.set: 1s超时时间设置', _ => {
    it('设置0.5秒之后取值，应取到', () => {
        cookie.set('exp2', '1s', 1000)
        setTimeout(_ => {
            expect(cookie.parse().exp2).to.be.equal('1s')
        }, 500)
    })
    it('设置1秒之后取值，不应取到', () => {
        cookie.set('exp', '1s', 1000)
        setTimeout(_ => {
            expect(cookie.parse().exp).to.equal(undefined)
        }, 1500)
    })
})