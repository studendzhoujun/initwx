/*
 * @Author: zhaoye 
 * @Date: 2017-01-03 19:47:26
 * @Last Modified by: liuxiaocong
 * @Last Modified time: 2019-02-21 18:26:07
 */
import 'core-js/fn/map'
import 'core-js/fn/promise'

import Base64 from 'gome-utils-base64'
import eventbus from 'gome-utils-eventbus'
import {env, system} from 'gome-utils-env'
import cookie from 'gome-utils-cookie'
import query from 'gome-utils-query'
import http from 'gome-utils-http'
import version from 'gome-utils-app-version'
import host  from 'gome-utils-host'
import GomeJSBridge from 'gome-bridge-core'
// webview融合版本标识 融合前一版90

let beforeFuse;
if(env.app && version && version >= 90){
    beforeFuse = false
}else{
    beforeFuse = true
}
function cb (cb, promisecb, ...params) {
    if(cb)cb(...params);
    if(promisecb)promisecb(...params);
}
//老bridge的代理
class OldBridgeProxy{
    _setBridge (bridge){
        this._bridge = bridge;
    }
    send (msg, info){
        return new Promise(function(resolve, reject){
            //没消息名时
            if(typeof info == 'undefined' && typeof msg != 'undefined'){
                info = msg;
                if(typeof info == 'string'){
                    throw new Error('消息体必须是json对象而不是json字符串');
                    return;
                }
                if(system.ios){
                    this._bridge.callHandler('send', JSON.stringify(info));
                }else if(system.android){
                    this._bridge.send(JSON.stringify(info));
                }
            }
            //有消息名时
            if(typeof msg == 'string' && typeof info != 'undefined'){
                if(typeof info == 'string'){
                    throw new Error('消息体必须是json对象而不是json字符串');
                    return;
                }
                if(system.ios){
                    this._bridge.callHandler(msg, JSON.stringify(info));
                }else if(system.android){
                    this._bridge.send(msg, JSON.stringify(info));
                }
            }
            resolve();
        }.bind(this));
    }
}
class Business{
    constructor(){
        this.Promise = Promise;
    }
    downloadElectronInvoice(opt, ok, fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse && version < 103){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.business.downloadElectronInvoice(data => {
                        cb(ok,resolve,data)
                    },err=>{
                        cb(fail,reject,err)
                    },opt)
                }
            }else{
                cb(fail,resolve,new Error('当前APP不支持此方法'))
            }
        }))
    }
}
class Kefu{
    constructor(){
        this.Promise = Promise;
    }
    init (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.kefu.init(data => {
                        cb(ok,resolve,data)
                    },err=>{
                        cb(fail,reject,err)
                    },opt)
                }
            }else{
                cb(ok,resolve)
            }
        }))
    }
    open (opt, ok, fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.kefu.open(data => {
                        cb(ok,resolve,data)
                    },err=>{
                        cb(fail,reject,err)
                    },opt)
                }
            }else{
                cb(ok,resolve)
            }    
        }))
    }
}
class Finance{
    constructor(){
    }
    encryptData (opt, ok, fail){
        //加密
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.finance.encryptData(data => {
                        data = typeof data == "string" ? JSON.parse(data) : data
                        cb(ok,resolve,data)
                    },err => {
                        cb(fail,reject,err)
                    },opt)
                }
            }else{
                cb(ok,resolve)
            }
        }))
    }
    decryptData (opt, ok, fail){
        // 解密
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.finance.decryptData(data => {
                        data = typeof data == "string" ? JSON.parse(data) : data
                        cb(ok,resolve,data)
                    },err=>{
                        cb(fail,reject,err)
                    },opt)
                }
            }else{
                cb(ok,resolve)
            }
        }))
    }
}
class ClassGomeJSBridge {
    constructor () {
        this._userInfo = null;

        this.Promise = Promise;

        this.http = http;
        this.cookie = cookie;
        this.query = query;
        this.env = env;
        this.system = system;
        this.host = host;
        
        this.emit = eventbus.emit;
        this.emitDOM = eventbus.emitDOM;
        this.on = eventbus.on;
        this.off = eventbus.off;
        this.kefu = new Kefu
        this.finance = new Finance
        this.business = new Business

        this.deprecated = new OldBridgeProxy;
    }
    mixin (dest, src) {
        for (let key in src) {
            if (typeof dest[key] == 'undefined') {
                dest[key] = src[key];
            }
        }
        return dest
    }
    back (opts, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {            
            if(!env.hybrid){
                window.location.back();
                cb(ok, resolve);
            }else if(env.hybrid || env.dev){
                if(!!beforeFuse){
                    navigator.gome.util.nativeUtils.nativeFinish( () => {
                        cb(ok, resolve);
                    }, () => {
                        cb(fail, resolve);
                    },opts || {});
                }else{
                    GomeJSBridge.finishSendMsg(data => {
                        cb(ok, resolve);
                    }, err => {
                        cb(ok, resolve);
                    },opts || {})
                }
            }     
        }));
    }
    // 新增 关闭当前页面方法
    popWindow(opt,ok,fail){
        return new Promise((resolve,reject) => {
            if(!!beforeFuse){
                cb(fial,resolve,new Error('当前APP版本不支持此方法'))
            }else{
                if(env.app){
                    GomeJSBridge.popWindow(function(data){
                        cb(ok,resolve,data)
                    },function(err){
                        cb(fial,reject,new Error(err.message || '失败'))
                    })
                }else{
                    window.location.back();
                    cb(ok, resolve);
                }
            }
        })
    }
    getAddress (opts, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
                if(env.hybrid){
                    if(!!beforeFuse){
                        navigator.gome.util.nativeUtils.getAddressFourArea(function(data){
                            data = typeof data === 'string' ? JSON.parse(data) : data;
                            //安卓63以前有bug，需要兼容
                            for(let key in data){
                                data[key] = typeof data[key] == 'string' ? JSON.parse(data[key]) : data[key]
                            }
                            cb(ok, resolve, data);
                        },function(){
                            cb(fail, reject, new Error('获取四级地址失败'));
                        });
                    }else{
                        GomeJSBridge.getLocation(function(data){
                            // data = typeof data == 'string' ? JSON.parse(data) : data
                            //安卓63以前有bug，需要兼容
                            for(let key in data){
                                data[key] = typeof data[key] == 'string' ? JSON.parse(data[key]) : data[key]
                            }
                            cb(ok, resolve, data);
                        },function(){
                            cb(fail, reject, new Error('获取四级地址失败'));
                        })
                    }
                }else if(!env.hybrid){
                    let _cookie = cookie.parse();
                    let _query = query.parse(window.location.search);
                    if(_query.cityjson){
                        _query.cityjson = JSON.parse(decodeURIComponent(_query.cityjson))
                        const result = {
                            province: {
                                code: _query.cityjson.cityId,
                                name: _query.cityjson.cityName,
                            },
                            city: {
                                code: _query.cityjson.cityId,
                                name: _query.cityjson.cityName,
                            },
                            district: {
                                code: _query.cityjson.districtId,
                                name: _query.cityjson.districtName,
                            },
                            town: {
                                code: _query.cityjson.townId,
                                name: _query.cityjson.townName,
                            },
                        };
                        cb(ok, resolve, result);
                    }else if(_cookie.gcid){
                        const result = {
                            province: {
                                code: _cookie['gpid'],
                            },
                            city: {
                                code: _cookie['gcid'],  
                            },
                            district: {
                                code: _cookie['gdid'],
                            },
                            town: {
                                code: _cookie['gtid'],
                            }
                        };
                        cb(ok, resolve, result);
                    }else{
                        //reject(new Error('获取四级地址失败'));
                        const result = {
                            province: {
                                name:'北京',
                                code: '13000000'
                            },
                            city: {
                                name:'北京市',
                                code: '13020000'
                            },
                            district: {
                                name:'朝阳区(五环里)',
                                code: '11010200'
                            },
                            town: {
                                name:'全部区域',
                                code: '110102001'
                            }
                        };
                        cb(ok, resolve, result);
                    }
                }else{
                    cb(fail, reject, new Error('获取四级地址失败'))
                }
        }));
    }

    getLocation( ok, fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app) {
                if(!!beforeFuse){
                    cb(fial,resolve,new Error('当前APP版本不支持此方法'))
                }else{
                    GomeJSBridge.getLocation(function(data){
                        data = typeof data == 'string' ? JSON.parse(data) : data
                        //安卓63以前有bug，需要兼容
                        for(let key in data){
                            data[key] = typeof data[key] == 'string' ? JSON.parse(data[key]) : data[key]
                        }
                        cb(ok, resolve, data);
                    },function(){
                        cb(fail, reject, new Error('获取四级地址失败'));
                    })
                }
            } else {
                let _cookie = cookie.parse();
                let _query = query.parse(window.location.search);
                if(_query.cityjson){
                    _query.cityjson = JSON.parse(decodeURIComponent(_query.cityjson))
                    const result = {
                        province: {
                            code: _query.cityjson.cityId,
                            name: _query.cityjson.cityName,
                        },
                        city: {
                            code: _query.cityjson.cityId,
                            name: _query.cityjson.cityName,
                        },
                        district: {
                            code: _query.cityjson.districtId,
                            name: _query.cityjson.districtName,
                        },
                        town: {
                            code: _query.cityjson.townId,
                            name: _query.cityjson.townName,
                        },
                    };
                    cb(ok, resolve, result);
                }else if(_cookie.gcid){
                    const result = {
                        province: {
                            code: _cookie['gpid'],
                        },
                        city: {
                            code: _cookie['gcid'],  
                        },
                        district: {
                            code: _cookie['gdid'],
                        },
                        town: {
                            code: _cookie['gtid'],
                        }
                    };
                    cb(ok, resolve, result);
                }
            }
        }))
    }



    //has been deprecatd
    //大概72版本开始不需要再使用
    getEnv (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            // 只增加对老版本的判断，融合后的新包暂无环境判断方法，用 env 来判断
            if(!!beforeFuse && env.hybrid){
                navigator.gome.util.nativeUtils.getAppEnvironment(function(data){
                    data = typeof data == 'string' ? JSON.parse(data) : data
                    data.environment = data.environment.toLowerCase();
                    cb(ok, resolve, data);
                })
            }else{
                if(env.live){
                    cb(ok, resolve, {environment:'pro'});
                }else{
                    cb(ok, resolve, {environment:'uat'});
                }
            }
        }))
    }
    getUserInfo (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!!beforeFuse){
                    if(env.hybrid){
                        if(env.gome || (env.gomeplus && !env.plusWebview)){
                            navigator.gome.util.nativeUtils.isLogin(function(data){
                                data = typeof data == 'string' ? JSON.parse(data) : data
                                if(data.isLogin == 'Y'){
                                    navigator.gome.util.nativeUtils.getUserInfo(function(data){
                                        data = typeof data == 'string' ? JSON.parse(data) : data
                                        cb(ok, resolve, data, false)
                                    },function(){
                                        cb(fail, reject, new Error('获取用户信息失败'))
                                    })
                                }else{
                                    cb(fail, reject, new Error('获取用户信息失败'))
                                }
                            },function(){
                                cb(fail, reject, new Error('获取用户信息失败'))
                            });
                        }else if(env.gomeplus && env.plusWebview){
                            if(this._userInfo){
                                cb(ok, resolve, this._userInfo);
                            }else{
                                cb(fail, reject, new Error('获取用户信息失败'))
                            }
                        }
                    }else{
                        http({
                            type: 'jsonp',
                            url: host.m + '/active/userAgent',
                            data: query.parse(location.search) || {},
                            cb: 'jsoncallback',
                            isPostBody: 'Y',
                            isNeedLoading: 'N'
                        })
                        .then(function(data){
                            if(data.islogin == 'Y'){
                                cb(ok, resolve, {
                                    profileId: data.uid,
                                    userName: data.loginName,
                                }, false)
                            }else{
                                cb(fail, reject, new Error('请先登录'))
                            }
                        })
                    }
                } else {
                    // hot-fix of android 2018/12/14
                    // this.getVersion().then(v => {
                        // if (v == 127 && env.android) {
                            GomeJSBridge.getUserInfo(function(info){
                                if (info && info.profileId) {
                                    cb(ok, resolve, info)
                                } else {
                                    cb(fail, reject, new Error('尚未登录'))
                                }
                            },function(err){
                                cb(fail, reject, new Error('获取用户信息失败'))
                            })
                        // } else {
                        //     GomeJSBridge.getUserInfo(function(info){
                        //         if(info.isLogined == 'Y' || info.isLogined == true){
                        //             cb(ok,resolve,info)
                        //         }else{
                        //             cb(fail, reject, new Error('尚未登录'))
                        //         }
                        //     },function(err){
                        //         cb(fail,reject,new Error('获取用户信息失败'))
                        //     })
                        // }
                    // })
                }
            }else{
                http({
                    type: 'jsonp',
                    url: host.m + '/active/userAgent',
                    data: query.parse(location.search) || {},
                    cb: 'jsoncallback',
                    isPostBody: 'Y',
                    isNeedLoading: 'N'
                })
                .then(function(data){
                    if(data.islogin == 'Y'){
                        cb(ok, resolve, {
                            profileId: data.uid,
                            userName: data.loginName,
                        }, false)
                    }else{
                        cb(fail, reject, new Error('请先登录'))
                    }
                })
            }
        }));
    }
    getVersion (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(version != -1){
                cb(ok, resolve, version)
            }else if(!!beforeFuse && env.hybrid){
                navigator.gome.util.nativeUtils.getAppVersion(function(data){
                    data = typeof data == 'string' ? JSON.parse(data) : data;
                    cb(ok, resolve, parseInt(data.dev_version));
                });
            }else{
                cb(ok, resolve, version)
            }
        }));
    }
    getUniqueId (ok, fail) {
        return Promise.resolve(new Promise(function(resolve, reject){
            if(!env.app){
                try{
                    if(cookie.parse()['gm_sid']){
                        cb(ok, resolve, cookie.parse()['gm_sid'])
                    }else{
                        cb(ok, resolve, cookie.parse()['__clickidc'])                    
                    }                    
                }catch(e){
                    cb(ok, resolve, '')
                    //reject(new Error('获取设备标识失败'))
                }
            }else{
                if(env.dev){
                    cb(ok, resolve, '1234567890');
                }else{
                    try{
                        let uid = ''
                        // if(system.android){
                        //     uid = navigator.userAgent.match(/gomeplus\/\d*\/([\w\-\d]*)\//)[1]
                        // }
                        // else if(system.ios)
                        //     uid = navigator.userAgent.match(/gomeplus\/iphone\/\d*\/([\w\-\d]*)\//)[1]
                        if($g.system.android){
                            uid = navigator.userAgent.match(/gomeplus\/\d*\/([\w\-\d]*)\//) ? navigator.userAgent.match(/gomeplus\/\d*\/([\w\-\d]*)\//)[1] : navigator.userAgent.match(/gome\/\d*\/([\w\-\d]*)\//)[1]
                        }
                        else if($g.system.ios){
                            uid = navigator.userAgent.match(/gomeplus\/iphone\/\d*\/([\w\-\d]*)\//) ? navigator.userAgent.match(/gomeplus\/iphone\/\d*\/([\w\-\d]*)\//)[1] : navigator.userAgent.match(/gome\/iphone\/\d*\/([\w\-\d]*)\//)[1]
                        }
                        cb(ok, resolve, uid)
                    }catch(e){
                        cb(ok, resolve, '')
                        //reject(new Error('获取设备标识失败'))
                    }
                }
            }
        }));
    }

    // TODO //getcmskey+sendrequest 
    http0 (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.hybrid){
                opt.type = opt.type.toUpperCase();
                if(!!beforeFuse){
                    navigator.gome.util.nativeRequest.sendNativeLayoutRequest(function(data){
                        if(typeof data == 'string')
                            data = data.replace(/\n/g,'');
                        data = typeof data === 'string' ? JSON.parse(data) : data
                        if(data.isSuccess){
                            if(data.isSuccess == 'N'){
                                cb(fail, reject, new Error(e.failReason || '请求失败'));
                            }else{
                                cb(ok, resolve, data);
                            }
                        }else{
                            cb(ok, resolve, data);
                        }
                    },function(e){
                        try{
                            e = typeof e === 'string' ? JSON.parse(e) : e
                            cb(fail, reject, new Error(e.failReason || '请求失败'));
                        }catch(_e){
                            cb(fail, reject, new Error('请求失败'))
                        }
                    }, this.mixin(opt,{
                        param: opt.data,
                        isNeedLoading: 'Y',
                    }))
                }else{
                    GomeJSBridge.getCMSKey(data => {
                        if(data && data.keyProms){
                            opt.data.keyProms = data.keyProms
                        }
                        GomeJSBridge.fetch(resource =>{
                            resource = typeof resource === 'string' ? JSON.parse(resource) : resource
                            if(resource.isSuccess == 'N'){
                                cb(fail, reject, new Error(resource.failReason || '请求失败'));                                
                            }else{
                                cb(ok, resolve, resource);
                            }
                        },e => {
                            cb(fail,reject,new Error( e || '获取失败'))
                        }, this.mixin(opt,{
                            param: opt.data,
                            isNeedLoading: 'Y',
                        }))
                    },err=>{
                        cb(fail,reject,new Error( err || '获取cms Key 失败'))
                    })
                }
            }else{
                opt.data.keyProms = document.querySelector('input#keyProms').value;
                opt.type = 'jsonp';
                http(this.mixin(opt,{
                    param: opt.data,
                    isNeedLoading: 'Y',
                })).then(function(data){
                    cb(ok, resolve, data);
                }).catch(function(){
                    cb(fail, reject, new Error('请求失败'))
                })
            }
        }))
    }
    login (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(!env.app && env.wap){
                //纯浏览器
                window.location.href = this.host.m + '/login.html?return_url=' + Base64.encode(window.location.href);
            }else if(env.app){
                if(!!beforeFuse){
                    //app内嵌
                    if(env.hybrid){
                        navigator.gome.app.nativeLogin.jumpToNativeLogin(function(data){
                            data = typeof data === 'string' ? JSON.parse(data) : data
                            if(data.jumpToNativeLogin == 'Y'){
                                cb(ok, resolve)
                            }else{
                                cb(fail, reject)
                            }
                        },function(){
                            cb(fail, reject)
                        })
                    }else if(env.gome || (env.gomeplus && !env.plusWebview)){
                        //在线app， 或新plus app，但容器为在线的webview
                        if(!window.location.href.match(/nlg\=1/)){
                            window.location.href = window.location.origin + window.location.pathname + '?nlg=1'
                        }
                        cb(ok, resolve)
                    }else if(env.gomeplus && env.plusWebview){
                        //新plus app，但容器为plus的webview
                        //兼容美信的jsbridge
                        window.AppInterface.call('/common/login',{
                            type         : opt ? (opt.type || '')       : '',
                            activityId   : opt ? (opt.activityId || '') : '',
                            channelId    : opt ? (opt.channelId || '')  : '',
                        }, data => {
                            data = typeof data === 'string' ? JSON.parse(data) : data
                            if(data.success == true){
                                this._userInfo = data.data;
                                cb(ok, resolve, data.data);
                            }else{
                                cb(fail, reject, new Error('登录失败'));
                            }
                        });
                    }//else{
                        //跳转用scheme，先写上，31版本再说，还不确定呢
                    //   window.location.href = host.m + '/login.html';
                // }
                }else{
                    let param = {};
                    if(env.hybrid){
                        param.refresh = false
                    }else{
                        param.refresh = true
                    }
                    GomeJSBridge.login(data => {
                        // data = typeof data === 'string' ? JSON.parse(data) : data
                        console.log(data)
                        cb(ok, resolve, data);
                    },() => {
                        cb(fail, reject, new Error('登录失败'));
                    }, param)
                }
            }
        }))
    }
    logout (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(!!beforeFuse){
                if(env.wap){
                    window.location.href = host.m + '/index.php?ctl=ucenter&act=loginOut';
                }else if(env.app){
                    if(env.hybrid){
                        navigator.gome.app.nativeLogin.jumpToNativeLogout(function(data){
                            data = typeof data === 'string' ? JSON.parse(data) : data
                            cb(ok, resolve);
                        },function(){
                            cb(ok, reject, new Error('登出失败'));
                        })
                    }else{
                        //bridge
                        console.warn('bridge没有登出的方法')
                        cb(ok, resolve);
                    }
                }
            }else{
                // TODO
                //新版APP暂无此方法
                cb(fail, reject, new Error('新版APP已弃用此方法'));
            }
        }))
    }
    maima (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(!!beforeFuse){
                if(env.hybrid){
                    this.getVersion().then(v => {
                        if(v >= 60){
                            navigator.gome.util.nativeUtils.getMeasure(opt)
                            resolve(ok, resolve);
                        }else{
                            navigator.gome.util.nativeUtils.getMeasure(opt.pageName)
                            resolve(ok, resolve);
                        }
                    })
                }else{
                    cb(ok, resolve)
                }
            }else{
                // this.setStatisticsInfo(ok, fail);
            }
        }))
    }
    
    setStatisticsInfo (ok, fail) {
        if(!!before){
            cb(fial,resolve,new Error('当前APP版本不支持此方法'))
        }else{
            if(env.app){
                /* // 暂未开发
                GomeJSBridge.setStatisticsInfo(data => {

                },err => {
                    
                })
                */
                cb(fail, reject, new Error('新版APP暂未开发此方法'));
            }
        }
    }

    ready (ok, fail) {
        //测试环境下，gomebridge的状态被components接管
        if(env.dev && window.components && components.Config){
            env.wap = components.Config.platform.wap
            env.app = components.Config.platform.app
            env.live = components.Config.platform.live
            env.uat = components.Config.platform.uat
            env.tslive = components.Config.platform.tslive
        }
        return Promise.resolve(new Promise((resolve, reject) => {
            //混合app
            if(env.app){
                if(!!beforeFuse){
                    if(env.hybrid){
                        document.addEventListener('deviceready',function(){
                            cb(ok, resolve);
                        });
                    }else if(env.app && !env.plusWebview){
                    //webview嵌套，且不论处于哪个app容器中
                    //只要是原国美在线webview的话
                    //就走这个分支
                        if(env.dev){
                            cb(ok, resolve);
                        }
                        if(system.android){
                            let cnt = 0;
                            const interval = setInterval(() => {
                                if(window.bridge){
                                    this.deprecated._setBridge(bridge);
                                    cb(ok, resolve);
                                    clearInterval(interval);
                                }
                                if(cnt == 100){
                                    reject(new Error('10秒内bridge未初始化成功'))
                                    clearInterval(interval);
                                }
                                cnt++;
                            },100);
                        }else if(system.ios){
                            function connectWebViewJavascriptBridge(callback) {
                                if (window.WebViewJavascriptBridge) {
                                    callback(WebViewJavascriptBridge)
                                } else {
                                    document.addEventListener('WebViewJavascriptBridgeReady', function() {
                                        callback(WebViewJavascriptBridge)
                                    }, false)
                                }
                            }
                            connectWebViewJavascriptBridge(bridge => {
                                this.deprecated._setBridge(bridge);
                                cb(ok, resolve);
                            })
                        }
                    }else if(env.app && env.gomeplus && env.plusWebview){
                        //webview嵌套，且处于美信webview中
                        /*
                        let cnt = 0;
                        const interval = setInterval(function(){
                            if(window.AppInterface){
                                cb(ok, resolve);
                                clearInterval(interval);
                            }
                            if(cnt == 100){
                                cb(fail, reject, new Error('10秒内AppInterface未初始化成功'))
                                clearInterval(interval);
                            }
                            cnt++;
                        }.bind(this),100);
                        */
                        //plus原生webview中使用domeready
                        document.addEventListener('DOMContentLoaded',function(){
                            cb(ok, resolve);
                        });
                    }
                }else{
                    GomeJSBridge.ready(function(){
                        cb(ok,resolve)   
                    },null)
                    document.addEventListener('back',function(){
                        cb(ok,resolve)   
                    })
                }
            }else if(env.wap && !env.app){
            //处于浏览器中
                if(document.readyState == 'interactive' || document.readyState == 'complete'){
                    cb(ok, resolve);
                }else{
                    document.addEventListener('DOMContentLoaded',function(){
                        cb(ok, resolve);
                    });
                }
            }
        }))
    }
    onPause (ok,fail){
        GomeJSBridge.onPause(function(){
            cb(ok)   
        })
    }
    onActive (ok,fail){
        GomeJSBridge.onActive(function(){
            cb(ok)   
        })
    }
    //deprecated
    setTitle (title, ok, fail) {
        const _this = this
        return Promise.resolve(new Promise((resolve, reject) => {
            if(!!beforeFuse){
                if(env.hybrid){
                    if(title){
                        navigator.gome.util.nativeUtils.showTitle(title);
                    }
                }
                cb(ok, resolve)
            }else{
                //this.setHeadBar(title, ok, fail)
            }
        }));
    }

    setHeadBar (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(!beforeFuse){
                let param = {};
                if(typeof opt == 'string'){
                    param.title = opt
                }else if(typeof opt == 'object'){
                    // TODO 对传入参数的处理
                    // 判断是否是setShareInfo 方法 传入的参数
                    if(!opt.menus && (opt.link || opt.imageUrl)){
                        let shareParams = {
                            'shareDesc': opt.shareDesc ||　'',
                            'shareUrl': opt.shareUrl || opt.link || '',
                            'shareImageUrl': opt.shareImageUrl || opt.imageUrl || '',
                            'title': opt.title || '',
                        };
                        param.menus = {}
                        param.menus.rightMenus = [
                            {
                                type:'share',
                                icon:'file://share',
                                shareInfo:shareParams
                            }
                        ]
                        GomeJSBridge.setHeadBar(data => {
                            cb(ok, resolve, data)
                        }, err => {
                            cb(fail, reject, err)
                        }, param)
                    }else{
                        // 判断是否是 新的APP传入的参数
                        param = opt
                    }
                }
                GomeJSBridge.setHeadBar(data => {
                    data = typeof data === 'string' ? JSON.parse(data) : data
                    cb(ok, resolve)
                },err => {
                    cb(fail, resolve)
                },param)
            }else{
                if(typeof opt == 'string'){
                    if(env.hybrid){
                        if(opt){
                            navigator.gome.util.nativeUtils.showTitle(opt);
                        }
                    }
                    cb(ok, resolve)
                }else if(typeof opt == 'object'){
                    if(opt && opt.title){
                        if(env.hybrid){
                            navigator.gome.util.nativeUtils.showTitle(opt.title);
                        }
                        cb(ok, resolve)
                    }
                    if(opt && opt.menus.rightMenus){
                        let opt2 = {}
                        opt.menus.rightMenus.forEach(function(item) {
                            if(item && item.type == "share"){
                                opt2 = item.shareInfo
                            }
                        });

                        //兼容老版本 start
                        this.mixin(opt2, {
                            type: 'button',
                            isShow: 'Y',
                            title: '',
                            shareDesc: '',
                            imageUrl: '',
                            link: '',
                            position: 'L',
                            method: 'goBack',
                        })
                        if(env.app){
                           if(!!beforeFuse){
                                if(env.hybrid){
                                    if(navigator.userAgent.match(/gomeplus/)){
                                        let shareParams = {
                                            'shareDesc': opt2.shareDesc ||　'',
                                            'shareUrl': opt2.shareUrl || opt2.link || '',
                                            'shareImageUrl': opt2.shareImageUrl || opt2.imageUrl || '',
                                            'title': opt2.title || '',
                                        };
                                        if(env.gomeplus && env.plusWebview && version >= 30){
                                            shareParams.sharePlatform = opt2.sharePlatform || '0,2,3'
                                        }
                                        navigator.gome.util.nativeUtils.shareLink(shareParams);      
                                    }else{
                                        if(opt.link && navigator.gome.util.nativeUtils.shareLink){
                                            this.getVersion().then(function(v){
                                                if(v >= 60){
                                                    navigator.gome.util.nativeUtils.shareLink({
                                                        'shareDesc': opt2.shareDesc ||　'',
                                                        'shareUrl': opt2.shareUrl || opt2.link || '',
                                                        'shareImageUrl': opt2.shareImageUrl || opt2.imageUrl || '',
                                                        'title': opt2.title || '',
                                                    })        
                                                }
                                                cb(ok, resolve)
                                            })
                                        }else{
                                            cb(fail, reject)
                                        }  
                                    }
                                }else if(env.gome || (env.gomeplus && !env.plusWebview)){
                                //此处判断env.gome为判断在gome环境中
                                //env.gomeplus && !env.plusWebview为判断融合app中非plusWebview的情况
                                    const method = {
                                        docObject:[{
                                                type: opt2.type,
                                                is_show: opt2.isShow,
                                                title: opt2.title,
                                                share_desc: opt2.shareDesc || opt2.shareDesc,
                                                image_url: opt2.shareImageUrl || opt2.imageUrl,
                                                link: opt2.shareUrl || opt2.link,
                                                position: opt2.position,
                                                method: opt2.method,
                                            }]
                                    }
                                    //容错
                                    console.log(method)
                                    console.log(env)
                                    if(this.env.gomeplus && this.env.plusWebview && version >= 30){
                                        method.docObject[0].sharePlatform = opt.sharePlatform || '0,2,3'
                                    }
                                    if(this.system.ios && window.location.pathname.match(/shop-\d+\.html/)){
                                        this.deprecated._bridge.send(JSON.stringify(method))
                                    }else{
                                        this.deprecated.send(method);
                                    }
                                    cb(ok, resolve)
                                }
                           }
                        }else{
                            cb(ok, resolve)
                        }
                        //end
                    }
                }
                // cb(fail, resolve, new Error('当前APP不支持此方法！！'))
            }
        }))
    }

    setShareInfo (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            this.mixin(opt, {
                type: 'button',
                isShow: 'Y',
                title: '',
                shareDesc: '',
                imageUrl: '',
                link: '',
                position: 'L',
                method: 'goBack',
            })
            if(env.app){
               if(!!beforeFuse){
                    if(env.hybrid){
                        if(navigator.userAgent.match(/gomeplus/)){
                            let shareParams = {
                                'shareDesc': opt.shareDesc ||　'',
                                'shareUrl': opt.shareUrl || opt.link || '',
                                'shareImageUrl': opt.shareImageUrl || opt.imageUrl || '',
                                'title': opt.title || '',
                            };
                            if(env.gomeplus && env.plusWebview && version >= 30){
                                shareParams.sharePlatform = opt.sharePlatform || '0,2,3'
                            }
                            navigator.gome.util.nativeUtils.shareLink(shareParams);      
                        }else{
                            if(opt.link && navigator.gome.util.nativeUtils.shareLink){
                                this.getVersion().then(function(v){
                                    if(v >= 60){
                                        navigator.gome.util.nativeUtils.shareLink({
                                            'shareDesc': opt.shareDesc ||　'',
                                            'shareUrl': opt.link || '',
                                            'shareImageUrl': opt.imageUrl || '',
                                            'title': opt.title || '',
                                        })        
                                    }
                                    cb(ok, resolve)
                                })
                            }else{
                                cb(fail, reject)
                            }  
                        }
                    }else if(env.gome || (env.gomeplus && !env.plusWebview)){
                    //此处判断env.gome为判断在gome环境中
                    //env.gomeplus && !env.plusWebview为判断融合app中非plusWebview的情况
                        const method = {
                            docObject:[{
                                    type: opt.type,
                                    is_show: opt.isShow,
                                    title: opt.title,
                                    share_desc: opt.shareDesc || opt.shareDesc,
                                    image_url: opt.shareImageUrl || opt.imageUrl,
                                    link: opt.shareUrl || opt.link,
                                    position: opt.position,
                                    method: opt.method,
                                }]
                        }
                        //容错
                        console.log(method)
                        console.log(env)
                        if(this.env.gomeplus && this.env.plusWebview && version >= 30){
                            method.docObject[0].sharePlatform = opt.sharePlatform || '0,2,3'
                        }
                        if(this.system.ios && window.location.pathname.match(/shop-\d+\.html/)){
                            this.deprecated._bridge.send(JSON.stringify(method))
                        }else{
                            this.deprecated.send(method);
                        }
                        cb(ok, resolve)
                    }
               }
            }else{
                cb(ok, resolve)
            }
        }))
    }
    toast (data, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!!beforeFuse){
                    if(env.hybrid){
                        navigator.gome.util.nativeUtils.showToast(data);
                    }else{
                        eventbus.emit('toast', data);
                        eventbus.emitDOM('toast', data);
                    }
                }else{
                    GomeJSBridge.toast(data =>{
                        cb(ok,resolve,data)
                    },()=>{
                        cb(fail,reject)
                    },data)
                }
            }else{
                eventbus.emit('toast', data);
                eventbus.emitDOM('toast', data);
            }

            // if(env.hybrid){
            //     navigator.gome.util.nativeUtils.showToast(data);
            // }else{
            //     eventbus.emit('toast', data);
            //     eventbus.emitDOM('toast', data);
            // }
            setTimeout(() => {
                cb(ok, resolve);
            }, 1000)
        }))
    }
    // 以下 为新增方法
    callShareComp (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!beforeFuse){
                    
                    let shareParams = {
                        'shareDesc': opt.shareDesc ||　'',
                        'shareUrl': opt.link || opt.shareUrl || '',
                        'shareImageUrl': opt.imageUrl || opt.shareImageUrl || '',
                        'title': opt.title || '',
                        'channel' : opt.channel ? opt.channel : 'link'
                    };
                    GomeJSBridge.callShareComp(data => {
                        cb(ok, resolve, data)
                    }, err => {
                        cb(fail, reject, err)
                    }, opt)
                }else{
                    cb(fail,resolve,new Error('当前APP不支持此方法！'))
                }
            }else{
                cb(ok,resolve)
            }
        }))
    }
    fetch (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!!beforeFuse){
                    cb(fail,resolve,new Error('当前APP不支持改方法'))
                }else{
                    GomeJSBridge.fetch(data => {
                        cb(ok, resolve, data);
                    }, err => {
                        cb(fail,reject,err)
                    },opt)
                }
            }else{
                http(this.mixin(opt,{
                    param: opt.data,
                    isNeedLoading: 'Y',
                })).then(data=>{
                    cb(ok, resolve, data);
                }).catch(function(){
                    cb(fail, reject, new Error('请求失败'))
                })
            }
        }))
    }
    // resume ( ok, fail) {
    //     return Promise.resolve(new Promise((resolve, reject) => {
    //         if(env.app){
    //             if(!beforeFuse){
    //                 document.addEventListener('resume',function(){
    //                     cb(ok, resolve);
    //                 },false)
    //             }else{
    //                 cb(fail,resolve,new Error('当前APP不支持此方法！'))
    //             }
    //         }else{
    //             cb(ok, resolve)
    //         }
    //     }))
    // }
    // pause (ok, fail) {
    //     return Promise.resolve(new Promise((resolve, reject) => {
    //         if(env.app){
    //             if(!beforeFuse){
    //                 document.addEventListener('pause',function(){
    //                     cb(ok, resolve);
    //                 },false)
    //             }else{
    //                 cb(fail,resolve,new Error('当前APP不支持此方法！'))
    //             }
    //         }else{
    //             cb(ok, resolve)
    //         }
    //     }))
    // }
    showLoadingView (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!beforeFuse){
                    GomeJSBridge.showLoadingView(data => {
                        cb(ok, resolve, data)
                    },err => {
                        cb(fail, reject, err)
                    })
                }else{
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }
            }else{
                eventbus.emit('loading')
                cb(ok, resolve)
            }
        }))
    }
    hideLoadingView (ok,fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!beforeFuse){
                    GomeJSBridge.hideLoadingView(data => {
                        cb(ok, resolve, data)
                    },err => {
                        cb(fail, reject, err)
                    })
                }else{
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }
            }else{
                eventbus.emit('loaded')
                cb(ok, resolve)
            }
        }))
    }
    showErrorView(ok, fail){
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!beforeFuse){
                    GomeJSBridge.showErrorView(data => {
                        cb(ok, resolve, data)
                    },err => {
                        cb(fail, reject, err)
                    })
                }else{
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }
            }else{
                cb(ok, resolve)
            }
        }))
    }
    hideErrorView (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!beforeFuse){
                    GomeJSBridge.hideErrorView(data=>{
                        cb(ok, resolve, data)
                    },err => {
                        cb(fail, reject,err)
                    })
                }else{
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }
            }else{
                cb(ok, resolve)
            }
        }))
    }
    // 获取设备相关信息
    getDeviceId (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!beforeFuse){
                    GomeJSBridge.getDeviceId(data=>{
                        data = typeof data === 'string' ? JSON.parse(data) : data
                        cb(ok, resolve, data)
                    },err => {
                        cb(fail, reject, err)
                    })
                }else{
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }
            }else{
                cb(ok, resolve)
            }
        }))
    }
    // 打开一个新的页面
    pushWindow (url, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.app){
                if(!beforeFuse){
                    GomeJSBridge.pushWindow(data =>{
                        cb(ok, resolve,data)
                    },()=>{
                        cb(fail, reject)
                    }, url)
                }else{
                    if(env.hybrid){
                        navigator.gome.util.nativeUtils.jumpExternalLink(url,data => {
                            cb(ok, resolve,data)
                        },err=>{
                            cb(fail, reject,err)
                        })
                    }else{
                        window.location.href = url
                        cb(ok, resolve)
                    }
                }
            }else{
                // TODO 是否要兼容wap的写法
                window.location.href = url
                cb(ok, resolve)
            }
        }))
    }

    getCMSKey (ok, fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.getCMSKey(data => {
                    /*{
                            "keyProms": "saleq4DxzajGg5a",
                       }
                    */                
                        cb(ok,resolve,data)
                    },err => {
                        cb(fail,reject,err)   
                    })
                }
            }
        }))
    }   
    onShopCartRefresh (ok,fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse || version < 101){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.onShopCartRefresh(data => {
                    /*{
                            result:0：成功，此时data有值 ,1：失败
                            data:'购物车数量'
                       }
                    */                
                       if(data && data.result == '0'){
                            cb(ok,resolve,data)
                       }else{
                            cb(fail,reject,data) 
                       }
                    },err => {
                        cb(fail,reject,err)   
                    })
                }
            }
        }))
    }
    updateShopCart (ok,fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse || version < 101){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.updateShopCart(data => {
                    /*{
                            result:0：成功，此时data有值 ,1：失败
                            data:'购物车数量'
                       }
                    */                
                       if(data && data.result == '0'){
                            cb(ok,resolve,data)
                       }else{
                            cb(fail,reject,data) 
                       }
                    },err => {
                        cb(fail,reject,err)   
                    })
                }
            }
        }))
    }
    onBackFromLastPage(ok,fail){
        if(env.app){
            if(!!beforeFuse || version < 103){
                cb(fail,new Error('当前APP不支持此方法'))
            }else{
                GomeJSBridge.onBackFromLastPage(data =>{
                    cb(ok,data)   
                })
            }
        }else{
            cb(ok,'不支持此方法')
        }
    }
    //103版本新增接口
    savePicture(url, ok, fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse || version < 103){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.savePicture(data =>{
                        cb(ok,resolve,data)   
                    },err=>{
                        cb(fail,reject,err)
                    },url)
                }
            }else{
                cb(ok,resolve)
            }
        }))   
    }

    showHeadBar(ok,fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse || version < 103){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.showHeadBar(data =>{
                        cb(ok,resolve,data)   
                    },err=>{
                        cb(fail,reject,err)
                    })
                }
            }else{
                cb(ok,resolve)
            }
        }))  
    }
    hideHeadBar(ok,fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse || version < 103){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.hideHeadBar(data =>{
                        cb(ok,resolve,data)   
                    },err=>{
                        cb(fail,reject,err)
                    })
                }
            }else{
                cb(ok,resolve)
            }
        }))  
    }
    callCashierComp(opt,ok,fail){
        return Promise.resolve(new Promise((resolve,reject) => {
            if(env.app){
                if(!!beforeFuse || version < 103){
                    cb(fail,resolve,new Error('当前APP不支持此方法'))
                }else{
                    GomeJSBridge.callCashierComp(data =>{
                        cb(ok,resolve,data)   
                    },err=>{
                        cb(fail,reject,err)
                    },opt)
                }
            }else{
                cb(ok,resolve)
            }
        }))  
    }
    onCallback(ok,fail){
        if(env.app){
            if(!!beforeFuse || version < 103){
                cb(fail,new Error('当前APP不支持此方法'))
            }else{
                GomeJSBridge.onCallback(data =>{
                    cb(ok,data)   
                })
            }
        }else{
            cb(ok,'不支持此方法')
        }
    }
}

module.exports = new ClassGomeJSBridge;