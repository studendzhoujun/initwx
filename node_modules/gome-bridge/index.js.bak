/*
 * @Author: zhaoye 
 * @Date: 2017-01-03 19:47:26
 * @Last Modified by: liuxiaocong
 * @Last Modified time: 2017-04-25 14:41:29
 */
import 'core-js/fn/map'
import 'core-js/fn/promise'

import Base64 from 'gome-utils-base64'
import eventbus from 'gome-utils-eventbus'
import {env, system} from 'gome-utils-env'
import cookie from 'gome-utils-cookie'
import query from 'gome-utils-query'
import http from 'gome-utils-http'
import version from 'gome-utils-app-version'
import host  from 'gome-utils-host'
function cb (cb, promisecb, ...params) {
    if(cb)cb(...params);
    if(promisecb)promisecb(...params);
}
//老bridge的代理
class OldBridgeProxy{
    _setBridge (bridge){
        this._bridge = bridge;
    }
    send (msg, info){
        return new Promise(function(resolve, reject){
            //没消息名时
            if(typeof info == 'undefined' && typeof msg != 'undefined'){
                info = msg;
                if(typeof info == 'string'){
                    throw new Error('消息体必须是json对象而不是json字符串');
                    return;
                }
                if(system.ios){
                    this._bridge.callHandler('send', JSON.stringify(info));
                }else if(system.android){
                    this._bridge.send(JSON.stringify(info));
                }
            }
            //有消息名时
            if(typeof msg == 'string' && typeof info != 'undefined'){
                if(typeof info == 'string'){
                    throw new Error('消息体必须是json对象而不是json字符串');
                    return;
                }
                if(system.ios){
                    this._bridge.callHandler(msg, JSON.stringify(info));
                }else if(system.android){
                    this._bridge.send(msg, JSON.stringify(info));
                }
            }
            resolve();
        }.bind(this));
    }
}
class GomeJSBridge {
    constructor () {
        this._userInfo = null;

        this.Promise = Promise;

        this.http = http;
        this.cookie = cookie;
        this.query = query;
        this.env = env;
        this.system = system;
        this.host = host;
        
        this.emit = eventbus.emit;
        this.emitDOM = eventbus.emitDOM;
        this.on = eventbus.on;
        this.off = eventbus.off;

        this.deprecated = new OldBridgeProxy;
    }
    mixin (dest, src) {
        for (let key in src) {
            if (typeof dest[key] == 'undefined') {
                dest[key] = src[key];
            }
        }
        return dest
    }
    back (opts, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(!env.hybrid){
                window.location.back();
                cb(ok, resolve);
            }else if(env.hybrid || env.dev){
                navigator.gome.util.nativeUtils.nativeFinish( () => {
                    cb(ok, resolve);
                }, () => {
                    cb(fail, resolve);
                },opts || {});
            }
        }));
    }
    getAddress (opts, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.hybrid){
                navigator.gome.util.nativeUtils.getAddressFourArea(function(data){
                    data = typeof data === 'string' ? JSON.parse(data) : data;
                    //安卓63以前有bug，需要兼容
                    for(let key in data){
                        data[key] = typeof data[key] == 'string' ? JSON.parse(data[key]) : data[key]
                    }
                    cb(ok, resolve, data);
                },function(){
                    cb(fail, reject, new Error('获取四级地址失败'));
                });
            }else if(!env.hybrid){
                let _cookie = cookie.parse();
                let _query = query.parse(window.location.search);
                if(_query.cityjson){
                    _query.cityjson = JSON.parse(decodeURIComponent(_query.cityjson))
                    const result = {
                        province: {
                            code: _query.cityjson.cityId,
                            name: _query.cityjson.cityName,
                        },
                        city: {
                            code: _query.cityjson.cityId,
                            name: _query.cityjson.cityName,
                        },
                        district: {
                            code: _query.cityjson.districtId,
                            name: _query.cityjson.districtName,
                        },
                        town: {
                            code: _query.cityjson.townId,
                            name: _query.cityjson.townName,
                        },
                    };
                    cb(ok, resolve, result);
                }else if(_cookie.gps_cityid){
                    const result = {
                        province: {
                            code: _cookie['gps_provinceid'],
                        },
                        city: {
                            code: _cookie['gps_cityid'],  
                        },
                        district: {
                            code: _cookie['gps_districtid'],
                        },
                        town: {
                            code: _cookie['gps_townid'],
                        }
                    };
                    cb(ok, resolve, result);
                }else{
                    //reject(new Error('获取四级地址失败'));
                    const result = {
                        province: {
                            name:'北京',
                            code: '13000000'
                        },
                        city: {
                            name:'北京市',
                            code: '13020000'
                        },
                        district: {
                            name:'朝阳区(五环里)',
                            code: '11010200'
                        },
                        town: {
                            name:'全部区域',
                            code: '110102001'
                        }
                    };
                    cb(ok, resolve, result);
                }
            }else{
                cb(fail, reject, new Error('获取四级地址失败'))
            }
        }));
    }
    //has been deprecatd
    //大概72版本开始不需要再使用
    getEnv (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.hybrid){
                navigator.gome.util.nativeUtils.getAppEnvironment(function(data){
                    data = typeof data == 'string' ? JSON.parse(data) : data
                    data.environment = data.environment.toLowerCase();
                    cb(ok, resolve, data);
                })
            }else{
                if(env.live){
                    cb(ok, resolve, {environment:'pro'});
                }else{
                    cb(ok, resolve, {environment:'uat'});
                }
            }
        }))
    }
    getUserInfo (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.hybrid){
                if(env.gome || (env.gomeplus && !env.plusWebview)){
                    navigator.gome.util.nativeUtils.isLogin(function(data){
                        data = typeof data == 'string' ? JSON.parse(data) : data
                        if(data.isLogin == 'Y'){
                            navigator.gome.util.nativeUtils.getUserInfo(function(data){
                                data = typeof data == 'string' ? JSON.parse(data) : data
                                cb(ok, resolve, data, false)
                            },function(){
                                cb(fail, reject, new Error('获取用户信息失败'))
                            })
                        }else{
                            cb(fail, reject, new Error('获取用户信息失败'))
                        }
                    },function(){
                        cb(fail, reject, new Error('获取用户信息失败'))
                    });
                }else if(env.gomeplus && env.plusWebview){
                    if(this._userInfo){
                        cb(ok, resolve, this._userInfo);
                    }else{
                        cb(fail, reject, new Error('获取用户信息失败'))
                    }
                }
            }else{
                //去掉原先的登陆验证接口
                // if(location.href.match(/gome\.com|atguat\.com/)){
                //     http({
                //         type: 'jsonp',
                //         url: (env.uat ? '//m.atguat.com.cn' : '//m.gome.com.cn' )+ "/index.php",
                //         data: {
                //             ctl: 'action',
                //             act: 'userAgent'
                //         },
                //         cb: 'jsoncallback',
                //         isPostBody: 'Y',
                //         isNeedLoading: 'N'
                //     })
                //     .then(function(data){
                //         if(data.islogin == 'Y'){
                //             cb(ok, resolve, {
                //                 profileId: data.uid,
                //                 userName: data.loginName,
                //             }, false)
                //         }else{
                //             cb(fail, reject, new Error('请先登录'))
                //         }
                //     })
                // }else{
                    http({
                        type: 'jsonp',
                        url: host.m + '/active/userAgent',
                        cb: 'jsoncallback',
                        isPostBody: 'Y',
                        isNeedLoading: 'N'
                    })
                    .then(function(data){
                        if(data.islogin == 'Y'){
                            cb(ok, resolve, {
                                profileId: data.uid,
                                userName: data.loginName,
                            }, false)
                        }else{
                            cb(fail, reject, new Error('请先登录'))
                        }
                    })
                //}
            }
        }));
    }
    getVersion (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(version != -1){
                cb(ok, resolve, version)
            }else if(env.hybrid){
                navigator.gome.util.nativeUtils.getAppVersion(function(data){
                    data = typeof data == 'string' ? JSON.parse(data) : data;
                    cb(ok, resolve, parseInt(data.dev_version));
                });
            }else{
                cb(ok, resolve, version)
            }
        }));
    }
    getUniqueId (ok, fail) {
        return Promise.resolve(new Promise(function(resolve, reject){
            if(env.wap){
                try{
                    cb(ok, resolve, cookie.parse()['__clickidc'])
                }catch(e){
                    cb(ok, resolve, '')
                    //reject(new Error('获取设备标识失败'))
                }
            }else if(env.hybrid){
                if(env.dev){
                    cb(ok, resolve, '1234567890');
                }else{
                    try{
                        let uid = ''
                        if(system.android){
                            uid = navigator.userAgent.match(/gome\/\d*\/([\w\-\d]*)\//)[1]
                        }
                        else if(system.ios)
                            uid = navigator.userAgent.match(/gome\/iphone\/\d*\/([\w\-\d]*)\//)[1]
                        cb(ok, resolve, uid)
                    }catch(e){
                        cb(ok, resolve, '')
                        //reject(new Error('获取设备标识失败'))
                    }
                }
            }
        }));
    }
    http0 (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.hybrid){
                opt.type = opt.type.toUpperCase();
                navigator.gome.util.nativeRequest.sendNativeLayoutRequest(function(data){
                    if(typeof data == 'string')
                        data = data.replace(/\n/g,'');
                    data = typeof data === 'string' ? JSON.parse(data) : data
                    if(data.isSuccess){
                        if(data.isSuccess == 'N'){
                            cb(fail, reject, new Error(e.failReason || '请求失败'));
                        }else{
                            cb(ok, resolve, data);
                        }
                    }else{
                        cb(ok, resolve, data);
                    }
                },function(e){
                    try{
                        e = typeof e === 'string' ? JSON.parse(e) : e
                        cb(fail, reject, new Error(e.failReason || '请求失败'));
                    }catch(_e){
                        cb(fail, reject, new Error('请求失败'))
                    }
                }, this.mixin(opt,{
                    param: opt.data,
                    isNeedLoading: 'Y',
                }))
            }else{
                opt.data.keyProms = document.querySelector('input#keyProms').value;
                opt.type = 'jsonp';
                http(this.mixin(opt,{
                    param: opt.data,
                    isNeedLoading: 'Y',
                })).then(function(data){
                    cb(ok, resolve, data);
                }).catch(function(){
                    cb(fail, reject, new Error('请求失败'))
                })
            }
        }))
    }
    login (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(!env.app && env.wap){
                //纯浏览器
                window.location.href = this.host.m + '/login.html?return_url=' + Base64.encode(window.location.href);
            }else if(env.app){
                //app内嵌
                if(env.hybrid){
                    navigator.gome.app.nativeLogin.jumpToNativeLogin(function(data){
                        data = typeof data === 'string' ? JSON.parse(data) : data
                        if(data.jumpToNativeLogin == 'Y'){
                            cb(ok, resolve)
                        }else{
                            cb(fail, reject)
                        }
                    },function(){
                        cb(fail, reject)
                    })
                }else if(env.gome || (env.gomeplus && !env.plusWebview)){
                    //在线app， 或新plus app，但容器为在线的webview
                    if(!window.location.href.match(/nlg\=1/)){
                        window.location.href = window.location.origin + window.location.pathname + '?nlg=1'
                    }
                    cb(ok, resolve)
                }else if(env.gomeplus && env.plusWebview){
                    //新plus app，但容器为plus的webview
                    //兼容美信的jsbridge
                    window.AppInterface.call('/common/login',{
                        type         : opt ? (opt.type || '')       : '',
                        activityId   : opt ? (opt.activityId || '') : '',
                        channelId    : opt ? (opt.channelId || '')  : '',
                    }, data => {
                        data = typeof data === 'string' ? JSON.parse(data) : data
                        if(data.success == true){
                            this._userInfo = data.data;
                            cb(ok, resolve, data.data);
                        }else{
                            cb(fail, reject, new Error('登录失败'));
                        }
                    });
                }//else{
                    //跳转用scheme，先写上，31版本再说，还不确定呢
                 //   window.location.href = host.m + '/login.html';
               // }
            }
        }))
    }
    logout (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.wap){
                window.location.href = host.m + '/index.php?ctl=ucenter&act=loginOut';
            }else if(env.app){
                if(env.hybrid){
                    navigator.gome.app.nativeLogin.jumpToNativeLogout(function(data){
                        data = typeof data === 'string' ? JSON.parse(data) : data
                        cb(ok, resolve);
                    },function(){
                        cb(ok, reject, new Error('登出失败'));
                    })
                }else{
                    //bridge
                    console.warn('bridge没有登出的方法')
                    cb(ok, resolve);
                }
            }
        }))
    }
    maima (ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.hybrid){
                this.getVersion().then(v => {
                    if(v >= 60){
                        navigator.gome.util.nativeUtils.getMeasure(opt)
                        resolve(ok, resolve);
                    }else{
                        navigator.gome.util.nativeUtils.getMeasure(opt.pageName)
                        resolve(ok, resolve);
                    }
                })
            }else{
                cb(ok, resolve)
            }
        }))
    }
    ready (ok, fail) {
        //测试环境下，gomebridge的状态被components接管
        if(env.dev && window.components && components.Config){
            env.wap = components.Config.platform.wap
            env.app = components.Config.platform.app
            env.live = components.Config.platform.live
            env.uat = components.Config.platform.uat
            env.tslive = components.Config.platform.tslive
        }
        return Promise.resolve(new Promise((resolve, reject) => {
            //混合app
            if(env.hybrid){
                document.addEventListener('deviceready',function(){
                    cb(ok, resolve);
                });
            }else if(env.app && !env.plusWebview){
            //webview嵌套，且不论处于哪个app容器中
            //只要是原国美在线webview的话
            //就走这个分支
                if(env.dev){
                    cb(ok, resolve);
                }
                if(system.android){
                    let cnt = 0;
                    const interval = setInterval(() => {
                        if(window.bridge){
                            this.deprecated._setBridge(bridge);
                            cb(ok, resolve);
                            clearInterval(interval);
                        }
                        if(cnt == 100){
                            reject(new Error('10秒内bridge未初始化成功'))
                            clearInterval(interval);
                        }
                        cnt++;
                    },100);
                }else if(system.ios){
                    function connectWebViewJavascriptBridge(callback) {
                        if (window.WebViewJavascriptBridge) {
                            callback(WebViewJavascriptBridge)
                        } else {
                            document.addEventListener('WebViewJavascriptBridgeReady', function() {
                                callback(WebViewJavascriptBridge)
                            }, false)
                        }
                    }
                    connectWebViewJavascriptBridge(bridge => {
                        this.deprecated._setBridge(bridge);
                        cb(ok, resolve);
                    })
                }
            }else if(env.app && env.gomeplus && env.plusWebview){
                //webview嵌套，且处于美信webview中
                /*
                let cnt = 0;
                const interval = setInterval(function(){
                    if(window.AppInterface){
                        cb(ok, resolve);
                        clearInterval(interval);
                    }
                    if(cnt == 100){
                        cb(fail, reject, new Error('10秒内AppInterface未初始化成功'))
                        clearInterval(interval);
                    }
                    cnt++;
                }.bind(this),100);
                */
                //plus原生webview中使用domeready
                document.addEventListener('DOMContentLoaded',function(){
                    cb(ok, resolve);
                });
            }else if(env.wap && !env.app){
            //处于浏览器中
                if(document.readyState == 'interactive' || document.readyState == 'complete'){
                    cb(ok, resolve);
                }else{
                    document.addEventListener('DOMContentLoaded',function(){
                        cb(ok, resolve);
                    });
                }
            }
        }))
    }
    setTitle (title, ok, fail) {
        return Promise.resolve(new Promise(function(resolve, reject){
            if(env.hybrid){
                if(title){
                    navigator.gome.util.nativeUtils.showTitle(title);
                }
            }
            cb(ok, resolve)
        }));
    }
    setShareInfo (opt, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            this.mixin(opt, {
                type: 'button',
                isShow: 'Y',
                title: '',
                shareDesc: '',
                imageUrl: '',
                link: '',
                position: 'L',
                method: 'goBack',
            })
            if(env.app){
                if(env.hybrid){
                    if(navigator.userAgent.match(/gomeplus/)){
                        let shareParams = {
                            'shareDesc': opt.shareDesc ||　'',
                            'shareUrl': opt.link || '',
                            'shareImageUrl': opt.imageUrl || '',
                            'title': opt.title || '',
                        };
                        if(env.gomeplus && env.plusWebview && version >= 30){
                            shareParams.sharePlatform = opt.sharePlatform || '0,2,3'
                        }
                        navigator.gome.util.nativeUtils.shareLink(shareParams);      
                    }else{
                        if(opt.link && navigator.gome.util.nativeUtils.shareLink){
                            this.getVersion().then(function(v){
                                if(v >= 60){
                                    navigator.gome.util.nativeUtils.shareLink({
                                        'shareDesc': opt.shareDesc ||　'',
                                        'shareUrl': opt.link || '',
                                        'shareImageUrl': opt.imageUrl || '',
                                        'title': opt.title || '',
                                    })        
                                }
                                cb(ok, resolve)
                            })
                        }else{
                            cb(fail, reject)
                        }  
                    }
                }else if(env.gome || (env.gomeplus && !env.plusWebview)){
                //此处判断env.gome为判断在gome环境中
                //env.gomeplus && !env.plusWebview为判断融合app中非plusWebview的情况
                    const method = {
                        docObject:[{
                                type: opt.type,
                                is_show: opt.isShow,
                                title: opt.title,
                                share_desc: opt.shareDesc,
                                image_url: opt.imageUrl,
                                link: opt.link,
                                position: opt.position,
                                method: opt.method,
                            }]
                    }
                    //容错
                    if(env.gomeplus && env.plusWebview && version >= 30){
                        method.docObject[0].sharePlatform = opt.sharePlatform || '0,2,3'
                    }
                    if(this.system.ios && window.location.pathname.match(/shop-\d+\.html/)){
                        this.deprecated._bridge.send(JSON.stringify(method))
                    }else{
                        this.deprecated.send(method);
                    }
                    cb(ok, resolve)
                }
            }else{
                cb(ok, resolve)
            }
        }))
    }
    toast (data, ok, fail) {
        return Promise.resolve(new Promise((resolve, reject) => {
            if(env.hybrid){
                navigator.gome.util.nativeUtils.showToast(data);
            }else{
                eventbus.emit('toast', data);
                eventbus.emitDOM('toast', data);
            }
            setTimeout(() => {
                cb(ok, resolve);
            }, 1000)
        }))
    }
}

module.exports = new GomeJSBridge;