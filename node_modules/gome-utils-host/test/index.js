/*
 * @Author: zhaoye 
 * @Date: 2017-10-27 13:30:38 
 * @Last Modified by: liuxiaocong
 * @Last Modified time: 2018-05-18 14:03:11
 */
const expect = chai.expect
import {location, navigator} from 'gome-utils-bom'
import {env} from 'gome-utils-env'
import host from '../index.js'

function stubFactory(env, platform, system) {
    const stubs = []
    const hrefStub = sinon.stub(location, 'getHref')
    const hostStub = sinon.stub(location, 'getHost')
    const protocolStub = sinon.stub(location, 'getProtocol')
    let _protocol = 'http:'
    let _host = ''
    if (env == 'uat') {
        _host = 'm.atguat.com.cn'        
    } else if (env == 'live'){
        _host = 'm.gome.com.cn'        
    } else if (env == 'tslive'){
        _host = 'm.tslive.com.cn'
    } else if (env == 'uatplus') {
        _host = 'm.uatplus.com.cn'
    } else if (env == 'tsliveplus') {
        _host = 'm.tsliveplus.com'
    } else if (env == 'uat.com'){
        _host = 'm.uat.com.cn'        
    }
    protocolStub.callsFake(() => {
        return _protocol
    })
    hrefStub.callsFake(() => {
        return `${_protocol}//${_host}/test.html`
    })
    hostStub.callsFake(() => {
        return _host
    })
    stubs.push(hrefStub, hostStub, protocolStub)
    return stubs
}

describe('host.get("m")', () => {
    describe('uat环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('uat')
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//m.atguat.com.cn' , () => {
            url = host.get('m')
            expect(url).to.equal('//m.atguat.com.cn')
        })
    })
    describe('uatplus环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('uatplus')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//m.uatplus.com' , () => {
            url = host.get('m')
            expect(url).to.equal('//m.uatplus.com')
        })
    })
    describe('tslive环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('tslive')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//m.tslive.com.cn' , () => {
            url = host.get('m')
            expect(url).to.equal('//m.tslive.com.cn')
        })
    })
    describe('tslive环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('tsliveplus')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//m.tsliveplus.com' , () => {
            url = host.get('m')
            expect(url).to.equal('//m.tsliveplus.com')
        })
    })
    describe('线上环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('live')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//m.gome.com.cn' , () => {
            url = host.get('m')
            expect(url).to.equal('//m.gome.com.cn')
        })
    })
})
describe('host.get("cart.m")', () => {
    describe('uat环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('uat')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('cart.m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//cart.m.atguat.com.cn' , () => {
            url = host.get('cart.m')
            expect(url).to.equal('//cart.m.atguat.com.cn')
        })
    })
    describe('.uat.com环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('uat.com')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('cart.m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//cart.m.uat.com.cn' , () => {
            url = host.get('cart.m')
            expect(url).to.equal('//cart.m.uat.com.cn')
        })
    })
    describe('uatplus环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('uatplus')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('cart.m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//cart.m.uatplus.com' , () => {
            url = host.get('cart.m')
            expect(url).to.equal('//cart.m.uatplus.com')
        })
    })
    describe('tslive环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('tslive')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('cart.m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//cart.m.tslive.com.cn' , () => {
            url = host.get('cart.m')
            expect(url).to.equal('//cart.m.tslive.com.cn')
        })
    })
    describe('tsliveplus环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('tsliveplus')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('cart.m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//cart.m.tsliveplus.com' , () => {
            url = host.get('cart.m')
            expect(url).to.equal('//cart.m.tsliveplus.com')
        })
    })
    describe('线上环境', () => {
        let stubs
        let url
        before(() => {
            stubs = stubFactory('live')        
        })
        after(() => {
            stubs.forEach(stub => stub.restore())
        })
        it ('应该是字符串', () => {
            url = host.get('cart.m')
            expect(url).to.be.a('string')
        })
        it ('应该等于//cart.m.gome.com.cn' , () => {
            url = host.get('cart.m')
            expect(url).to.equal('//cart.m.gome.com.cn')
        })
    })
})
