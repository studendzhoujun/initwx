/*
 * @Author: zhaoye 
 * @Date: 2017-02-16 21:00:49 
 * @Last Modified by: zhaoye
 * @Last Modified time: 2018-02-07 14:52:37
 */
import {env} from 'gome-utils-env'
import eventbus from 'gome-utils-eventbus'
import Query from 'gome-utils-query'
import version from 'gome-utils-app-version'
import GomeJSBridge from 'gome-bridge-core'
function mixin (dest, src) {
    for (let key in src) {
        if (typeof dest[key] == 'undefined') {
            dest[key] = src[key];
        }
    }
    return dest
}

function cb (cb, promisecb, ...params) {
    if(cb)cb(...params);
    if(promisecb)promisecb(...params)
}

let beforeFuse;
if(env.app && version && version >= 90){
    beforeFuse = false
}else{
    beforeFuse = true
}

/**
 * 一个error的构建器
 * @param type {Int} 0:默认 1:自定义 2:app返回 3: 超时
 */
function errorFactory (type = 0, message = '系统繁忙中，请稍后再试') {
    const error = new Error(message)
    error.type = type
    return error
}

let jsonpCntr = 0;
export default function (opt, ok, fail) {
    opt = mixin(opt, {
        url: '',
        //get,post,jsonp
        type: 'get',
        //params
        data: '',
        //true(default), false
        isNeedLoading: 'Y',
        defferedTime: 700,
        //N(default)
        isPostBody: 'N',
        //启用cors
        cors: 'N',
        simpleCors: 'N',
        dataType: 'form',
    })
    if (opt.simpleCors == 'Y') {
        opt.cors = 'Y'
    }
    //非混合app域名不同自动jsonp
    if(!env.hybrid && !opt.url.match(window.location.host) && opt.cors == 'N'){
        opt.type = 'jsonp'
    }
    return Promise.resolve(new Promise((resolve, reject) => {
        // if (window.navigator.onLine === false && !location.protocol.match(/file/) && document.readyState == 'complete') {
            // custom message
            // cb(fail, reject, errorFactory(1, '当前无网络，请稍后再试'))
        //混合app app代理
        // } else 
        if(env.hybrid && !opt.type.match(/jsonp/i)){
            opt.type = opt.type.toUpperCase();
            let request = mixin(opt, {
                param: opt.data,
                isNeedLoading: 'Y',
                isPostBody: 'N',
            });
            delete request['data'];
            if(!!beforeFuse){
                navigator.gome.util.nativeRequest.sendNativeRequest(function(data){
                    data = typeof data === 'string' ? JSON.parse(data) : data
                    cb(ok, resolve, data);
                },function(e){
                    try{
                        e = typeof e === 'string' ? JSON.parse(e) : e
                        cb(fail, reject, errorFactory(
                            e.failReason ? 2 : 1, e.failReason || '系统繁忙中，请稍后再试'
                        ))
                    }catch(_e){
                        cb(fail, reject, errorFactory())
                    }
                }, request);
            }else{
                request.method = request.method ? request.method : request.type
                GomeJSBridge.fetch(data => {
                    cb(ok, resolve, data);
                },e => {
                    cb(fail, reject, errorFactory());
                }, request)
            }
        }else if(opt.type.match(/jsonp/i)){
            //jsonp
            if(opt.isNeedLoading == 'Y'){
                eventbus.emit('loading.lazy', opt.defferedTime)
                eventbus.emitDOM('loading')
            }
            if(!opt.isPostBody || opt.isPostBody == 'N'){
                var param = encodeURI(JSON.stringify(opt.data));
                var script = document.createElement('script');
                script.setAttribute('defer','defer')
                script.setAttribute('async','async')
                script.src = opt.url+'?bust=' + (new Date()).getTime()+'&body='+param+'&callback=' + (opt.cb || ('jsonp'+jsonpCntr))
            }else{
                var param = '';
                for(var key in opt.data){
                    param += '&'+key+'='+opt.data[key];
                }
                var script = document.createElement('script');
                script.setAttribute('defer','defer')
                script.setAttribute('async','async')
                script.src = opt.url + '?bust=' + new Date().getTime() + param + '&callback=' + ( opt.cb || ('jsonp'+jsonpCntr))
            }
            var isResolved = false;
            var isRejected = false;
            var _ok = function(data){
                if(isRejected)return;
                isResolved = true;
                data = typeof data == 'string' ? data.replace(/\n/g,'') :　data;
                try{
                    data = typeof data == 'string' ? JSON.parse(data) : data;
                    eventbus.emit('loaded')
                    eventbus.emitDOM('loaded')
                    cb(ok, resolve, data);
                }catch(e){
                    eventbus.emit('loaded')
                    eventbus.emitDOM('loaded')
                    cb(fail, reject, data);
                }
            }
            window[opt.cb || ('jsonp'+jsonpCntr)] = _ok
            setTimeout(function(){
                if(isResolved || isRejected)return;
                isRejected = true;
                eventbus.emit('loaded')
                eventbus.emitDOM('loaded')
                cb(fail, reject, errorFactory(1));
            },opt.timeout || 20000)
            script.onerror = function(){
                if(isResolved || isRejected)return;
                isRejected = true;
                eventbus.emit('loaded')
                eventbus.emitDOM('loaded')
                cb(fail, reject, errorFactory(1));
            }
            jsonpCntr++;
            document.body.appendChild(script)
        }else{
            //ajax
            var ajax = new window.XMLHttpRequest();
            if(opt.type.match(/get/i)){
                if (opt.data) {
                    opt.url = opt.url + Query.queryify(opt.data)
                }
            }
            ajax.onreadystatechange = () => {
                let result;
                if (isTimeout) {
                    cb(fail, reject, errorFactory(3, '网络请求超时'))
                    eventbus.emit('loaded')
                    eventbus.emitDOM('loaded')
                    return
                }
                if (ajax.readyState == 4) {
                    if (ajax.readyState == 4) {
                        ajax.onreadystatechange = () => {};
                        if ((ajax.status >= 200 && ajax.status < 300) || ajax.status == 304 || (ajax.status == 0 && window.location.protocol == 'file:')) {
                            if (ajax.responseType == 'arraybuffer' || ajax.responseType == 'blob')
                                result = ajax.response
                            else {
                                result = ajax.responseText
                            }
                            try{
                                const data = JSON.parse(result)
                                eventbus.emit('loaded')
                                eventbus.emitDOM('loaded')
                                cb(ok, resolve, data)
                            }catch(e){
                                eventbus.emit('loaded')
                                eventbus.emitDOM('loaded')
                                cb(ok, resolve, result)
                            }
                        }else{
                            eventbus.emit('loaded')
                            eventbus.emitDOM('loaded')
                            cb(fail, reject, errorFactory())
                        }
                    }else{
                        eventbus.emit('loaded');
                        eventbus.emitDOM('loaded')
                        cb(fail, reject, errorFactory())
                    }
                }
            }
            ajax.open(opt.type, opt.url, true, null, null)
            if(opt.isNeedLoading == 'Y'){
                eventbus.emit('loading.lazy', opt.defferedTime)
                eventbus.emitDOM('loading')
            }
            if(opt.cors == 'Y'){
                if (opt.simpleCors == 'N') {
                    ajax.withCredentials = true
                }
                ajax.setRequestHeader('Accept','application/json')
            }else{
                ajax.setRequestHeader('Accept','*/*')
                ajax.setRequestHeader('X-Requested-With','XMLHttpRequest')
            }
            if (opt.dataType == 'form')
                ajax.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
            else if (opt.dataType == 'json')
                ajax.setRequestHeader('Content-Type','application/json; charset=utf-8')
            let isTimeout = false
            setTimeout(_ => {
                isTimeout = true
                ajax.abort()
            }, 20000)
            if(opt.type.match(/get|delete/i)){
                ajax.send(null);
            }else if(opt.type.match(/post|put/i)){
                let param = ""
                if(opt.isPostBody == 'N' && opt.cors == 'Y'){
                    param = encodeURIComponent('body') + '=' + new Object(JSON.stringify(opt.data))
                }else{
                    for(let key in opt.data){
                        let obj
                        if(typeof opt.data[key] == 'object')
                            obj = new Object(JSON.stringify(opt.data[key]))
                        else
                            obj = opt.data[key]
                        param += encodeURIComponent(key) +"="+obj+"&"
                    }
                    if(param)
                        param = param.replace(/\&$/,'')
                    else
                        param = null
                }
                if (opt.dataType == 'form')
                    ajax.send(param)
                else if (opt.dataType == 'json')
                    ajax.send(JSON.stringify(opt.data))
            }
        }
    }));
}