/*
 * @Author: zhaoye 
 * @Date: 2017-08-07 16:03:55 
 * @Last Modified by: zhaoye
 * @Last Modified time: 2018-01-08 12:48:37
 */
// import http from '../index.js'

// document.querySelector('#post').addEventListener('click', e => {
//     http({
//         url: `//${location.host}/mock.jsp`,
//         type: 'post',
//         cors: 'Y',
//         isPostBody: 'Y',
//         data: {
//             ff: '22'
//         }
//     }).then(data => {
//         alert(JSON.stringify(data))
//     }).catch(e => {
//         if(e.name == 'Error'){
//             console.log(e.message)
//             alert(e.message)
//         }   
//         console.log(e)
//         console.log(e.message)
//         console.log(e.name)
//     })
// })

// document.querySelector('#get').addEventListener('click', e => {
//     http({
//         url: `//${location.host}/mock.jsp`,
//         type: 'get',
//         cors: 'Y'
//     }).then(data => {
//         alert(JSON.stringify(data))
//     }).catch(e => {
//         if(e.type){
//             console.log(e.message)
//             alert(e.message)
//         }
//     })
// })



window._XMLHttpRequest = XMLHttpRequest
import 'core-js/fn/promise'
import query from 'gome-utils-query'
import http from '../index.js'
import {location} from 'gome-utils-bom'


const expect = chai.expect
describe('get', () => {
    let xhr
    let reqs = []
    before(() => {
        xhr = sinon.useFakeXMLHttpRequest()
        xhr.onCreate = function (req) {
            req.onSend = function () {
                reqs.push(req)
            }
        }
    })
    after(() => {
        xhr.restore()
    })
    it('simple-get', done => {
        http({
            url: `${location.getHost()}/test`,
        }).then(data => {
            expect(data).to.be.a('object')
            expect(data.isSuccess).to.equal('Y')
            done()
        }).catch(e => {
            expect(e).to.equal(null)
            done()
        })
        reqs[0].respond(200, {"Content-Type": "application/json"}, JSON.stringify({'isSuccess':'Y'}))
    })
    it('with params', done => {
        http({
            url: `${location.getHost()}/test`,
            data: {
                foo: 'bar',
                baz: 'qux',
            }
        }).then(data => {
            expect(data).to.be.a('object')
            expect(data.isSuccess).to.equal('Y')
            done()
        }).catch(e => {
            expect(e).to.equal(null)
            done()
        })
        reqs[1].respond(200, {"Content-Type": "application/json"}, JSON.stringify({'isSuccess':'Y'}))
    })
})
describe('post', () => {
    let xhr
    let reqs = []
    before(() => {
        xhr = sinon.useFakeXMLHttpRequest()
        xhr.onCreate = function (req) {
            req.onSend = function () {
                reqs.push(req)
            }
        }
    })
    after(() => {
        xhr.restore()
    })
    it('simple-post', done => {
        http({
            url: `${location.getHost()}/test`,
            type: 'post',
        }).then(data => {
            expect(data).to.be.a('object')
            expect(data.isSuccess).to.equal('Y')
            done()
        }).catch(e => {
            expect(e).to.equal(null)
            done()
        })
        reqs[0].respond(200, {"Content-Type": "application/json"}, JSON.stringify({'isSuccess':'Y'}))
    })
    it('with simple params', done => {
        http({
            url: `${location.getHost()}/test`,
            type: 'post',
            data: {
                foo: 'bar',
                baz: 'qux',
            }
        }).then(data => {
            expect(data).to.be.a('object')
            expect(data.isSuccess).to.equal('Y')
            done()
        }).catch(e => {
            expect(e).to.equal(null)
            done()
        })
        reqs[1].respond(200, {"Content-Type": "application/json"}, JSON.stringify({'isSuccess':'Y'}))
    })
    it('with object params', done => {
        http({
            url: `${location.getHost()}/test`,
            type: 'post',
            data: {
                foo: 'bar',
                baz: {'foobar':'qux'},
            }
        }).then(data => {
            expect(data).to.be.a('object')
            expect(data.isSuccess).to.equal('Y')
            done()
        }).catch(e => {
            expect(e).to.equal(null)
            done()
        })
        reqs[2].respond(200, {"Content-Type": "application/json"}, JSON.stringify({'isSuccess':'Y'}))
    })
})