import {expect} from 'chai'
import eventbus from '../index.js'
describe('eventbus.emit', _ => {
    describe('发出消息test', function(){
        it('不报错', done => {
            eventbus.emit('test')
            done()
        })
    })
})
describe('eventbus.on', _ => {
    describe('发出消息', function(){
        it('callback接受到消息test', done => {
            eventbus.on('test', _ => {
                done()
            })
            eventbus.emit('test')
        })
    })
    describe('发出消息且带上参数,字符串str_test', function(){
        it('callback接受到消息和参数，且参数为str_test', done => {
            eventbus.on('test2', data => {
                expect(data).to.be.a('string')
                expect(data).to.equal('str_test')
                done()
            })
            eventbus.emit('test2', 'str_test')
        })    
    })
    describe('发出消息且带上参数,数字12', function(){
        it('callback接受到消息和参数，且参数为12', done => {
            eventbus.on('test3', data => {
                expect(data).to.be.a('number')
                expect(data).to.equal(12)
                done()
            })
            eventbus.emit('test3', 12)
        })    
    })
    describe('发出消息且带上数组[1, 2]', _ => {
        it('callback接受到消息和参数，且参数为[1, 2]', done => {
            eventbus.on('test4', data => {
                expect(data).to.be.a('array')
                expect(data[0]).to.equal(1)
                expect(data[1]).to.equal(2)
                done()
            })
            eventbus.emit('test4', [1, 2])
        })
    })
    describe('发出5次消息', _ => {
        it('接到5次消息', done => {
            let cnt = 0
            eventbus.on('test_times', _ => {
                cnt++
            })
            setTimeout(_ => {
                expect(cnt).to.equal(5)
                done()
            })
            eventbus.emit('test_times')
            eventbus.emit('test_times')
            eventbus.emit('test_times')
            eventbus.emit('test_times')
            eventbus.emit('test_times')
        })
    })
})

describe('eventbus.off', _ => {
    describe('发出5次消息，侦听一次消息，然后取消侦听', _ => {
        it ('只侦听到一次消息', done => {
            let cnt = 0
            eventbus.on('test_off', _ => {
                eventbus.off('test_off')
                cnt++
            })
            setTimeout(_ => {
                expect(cnt).to.equal(1)
                done()
            }, 1000)
            eventbus.emit('test_off')
            eventbus.emit('test_off')
            eventbus.emit('test_off')
            eventbus.emit('test_off')
            eventbus.emit('test_off')
        })
    })
})

describe('eventbus.once', _ => {
    describe('发出5次消息，侦听一次消息', _ => {
        it ('只侦听到一次消息', done => {
            let cnt = 0
            eventbus.once('test_once', _ => {
                cnt++
            })
            setTimeout(_ => {
                expect(cnt).to.equal(1)
                done()
            }, 1000)
            eventbus.emit('test_once')
            eventbus.emit('test_once')
            eventbus.emit('test_once')
            eventbus.emit('test_once')
            eventbus.emit('test_once')
        })
    })
})

describe('eventbus.only', _ => {
    describe('建立五个侦听器，发出一次消息', _ => {
        it ('只有一个侦听器侦听到消息', done => {
            let cnt = 0
            eventbus.only('test_only', _ => {
                cnt++
            })
            eventbus.only('test_only', _ => {
                cnt++
            })
            eventbus.only('test_only', _ => {
                cnt++
            })
            eventbus.only('test_only', _ => {
                cnt++
            })
            eventbus.only('test_only', _ => {
                cnt++
            })
            setTimeout(_ => {
                expect(cnt).to.equal(1)
                done()
            }, 1000)
            eventbus.emit('test_only')
        })
        it ('只有最后一个侦听器侦听到消息', done => {
            let cnt = 0
            eventbus.only('test_only1', _ => {
                expect(true).to.be(false)
                done()
                cnt++
            })
            eventbus.only('test_only1', _ => {
                expect(true).to.be(false)
                done()
                cnt++
            })
            eventbus.only('test_only1', _ => {
                expect(true).to.be(false)
                done()
                cnt++
            })
            eventbus.only('test_only1', _ => {
                expect(true).to.be(false)
                done()
                cnt++
            })
            eventbus.only('test_only1', _ => {
                cnt++
                expect(cnt).to.equal(1)
                done()
            })
            eventbus.emit('test_only1')
        })
    })
})

describe('eventbus.emitDOM', _ => {
    describe('发出一个消息', _ => {
        it('用window.addEventListener侦听到消息', done => {
            window.addEventListener('test_emit_dom', e => {
                expect(true).to.equal(true)
                done()
            })
            eventbus.emitDOM('test_emit_dom')
        })
    })
    describe('发出一个带参数的消息', _ => {
        it('侦听到消息和参数', done => {
            window.addEventListener('test_emit_dom1', e => {
                expect(e.data).to.equal('test_str')
                done()
            })
            eventbus.emitDOM('test_emit_dom1', 'test_str')
        })
    })
    describe('以document.body发出一个消息', _ => {
        it('侦听到消息和参数', done => {
            document.body.addEventListener('test_emit_dom2', e => {
                expect(e.data).to.equal('test_str')
                done()
            })
            eventbus.emitDOM('test_emit_dom2', 'test_str', false, false, document.body)
        })
    })
})