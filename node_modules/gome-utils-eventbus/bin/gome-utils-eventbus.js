(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["gomeUtilsEventBus"] = factory();
	else
		root["gomeUtilsEventBus"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * @Author: zhaoye 
 * @Date: 2017-01-30 13:12:24 
 * @Last Modified by: zhaoye
 * @Last Modified time: 2017-10-30 17:35:37
 */
/**
 * Minimal polyfill of Map
 */
var Map = function () {
    function Map() {
        _classCallCheck(this, Map);
    }

    _createClass(Map, [{
        key: 'get',
        value: function get(key) {
            return this[key];
        }
    }, {
        key: 'set',
        value: function set(key, value) {
            this[key] = value;
        }
    }, {
        key: 'has',
        value: function has(key) {
            if (this[key]) {
                return true;
            } else {
                return false;
            }
        }
    }, {
        key: 'delete',
        value: function _delete(key) {
            delete this[key];
        }
    }]);

    return Map;
}();

var EventBus = function () {
    function EventBus() {
        _classCallCheck(this, EventBus);

        if (!window['__eventBusgetInstance']) {
            window['__eventBusgetInstance'] = this;
            this.cid = 0;
            this.msgMap = new Map();
        }
    }

    _createClass(EventBus, [{
        key: 'getInstance',
        value: function getInstance() {
            return window['__eventBusgetInstance'];
        }
    }, {
        key: 'getCid',
        value: function getCid() {
            this.getInstance().cid++;
            return this.getInstance().cid;
        }
    }, {
        key: 'emitDOM',
        value: function emitDOM(msg) {
            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var canBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var canCancel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var dom = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window;

            var event = document.createEvent('HTMLEvents');
            event.data = data;
            event.initEvent(msg, canBubble, canCancel);
            dom.dispatchEvent(event);
        }
    }, {
        key: 'emit',
        value: function emit(msg, data, instance) {
            if (this.getInstance().msgMap.has(msg)) {
                this.getInstance().msgMap.get(msg).forEach(function (cb) {
                    if (instance && cb.instance) {
                        if (cb.instance === instance) {
                            if (cb.__once && !cb.__emitted) {
                                cb.__emitted = true;
                                cb(data);
                            } else if (!cb.__once && !cb.__emitted) {
                                cb(data);
                            }
                        }
                    } else {
                        if (cb.__once && !cb.__emitted) {
                            cb.__emitted = true;
                            cb(data);
                        } else if (!cb.__once && !cb.__emitted) {
                            cb(data);
                        }
                    }
                });
            }
        }
    }, {
        key: 'on',
        value: function on(msg, cb, instance, name) {
            if (!cb) cb = new Function();
            cb.cid = this.getCid();
            cb.nid = name;
            cb.instance = instance;
            if (!this.getInstance().msgMap.has(msg)) {
                this.getInstance().msgMap.set(msg, [cb]);
            } else {
                this.getInstance().msgMap.get(msg).push(cb);
            }
        }
    }, {
        key: 'only',
        value: function only(msg, cb, instance, name) {
            if (this.getInstance().msgMap.has(msg)) {
                this.getInstance().msgMap.delete(msg);
            }
            this.on(msg, cb, instance, name);
        }
    }, {
        key: 'once',
        value: function once(msg, cb, instance, name) {
            cb.__once = true;
            cb.__emitted = false;
            this.on(msg, cb, instance, name);
        }
    }, {
        key: 'off',
        value: function off(msg, cb) {
            if (this.getInstance().msgMap.has(msg)) {
                var cbSet = this.getInstance().msgMap.get(msg);
                if (!!cb && typeof cb === 'function') {
                    cbSet.forEach(function (_cb, index) {
                        if (!!cb.cid && cb.cid === _cb.cid) {
                            cbSet.splice(index, index);
                        }
                    });
                } else if (!!cb && typeof cb === 'string') {
                    var name = cb;
                    //name
                    cbSet.forEach(function (_cb, index) {
                        if (name === _cb.nid) {
                            cbSet.splice(index, index);
                        }
                    });
                } else {
                    this.getInstance().msgMap.delete(msg);
                }
            }
        }
    }]);

    return EventBus;
}();

exports.Map = Map;
exports.default = new EventBus();

/***/ })
/******/ ]);
});